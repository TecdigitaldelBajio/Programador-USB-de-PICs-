D G "__PCD__" 0 20 ""5.008""
D G "__DEVICE__" 0 20 "4002"
D G "__DATE__" 0 20 ""17-oct.-16""
D G "__TIME__" 0 20 ""11:11:27"" "Standard Header file for the PIC24FJ64GA002 device ////////////////"
c L "set_tris_a" 2 5 16 "FUNCTION"
v L "value" 2 35 "int16" `53 
f B "set_tris_a" 2 35 "void(int16 value)" `52 
v L "value" 2 36 "int16" `55 
f B "set_tris_b" 2 36 "void(int16 value)" `54 
f B "get_tris_a" 2 37 "int16()" `56 
f B "get_tris_b" 2 38 "int16()" `57 
v L "value" 2 39 "int16" `59 
f B "output_a" 2 39 "void(int16 value)" `58 
v L "value" 2 40 "int16" `61 
f B "output_b" 2 40 "void(int16 value)" `60 
f B "input_a" 2 41 "int16()" `62 
f B "input_b" 2 42 "int16()" `63 
f B "input_change_a" 2 43 "int8()" `64 
f B "input_change_b" 2 44 "int8()" `65 
v L "state" 2 45 "int8" `67 
f B "set_pullup" 2 45 "void(int8 state)" `66 
v L "state" 2 46 "int8" `69 
v L "pin" 2 46 "int16" `70 
f G "set_pullup" 2 46 "void(int8 state,int16 pin)" `68 
v L "state" 2 47 "int8" `72 
f B "set_pulldown" 2 47 "void(int8 state)" `71 
v L "state" 2 48 "int8" `74 
v L "pin" 2 48 "int16" `75 
f G "set_pulldown" 2 48 "void(int8 state,int16 pin)" `73 
v L "pin" 2 49 "int16" `77 
f B "input" 2 49 "int8(int16 pin)" `76 
v L "pin" 2 50 "int16" `79 
f B "input_state" 2 50 "int8(int16 pin)" `78 
v L "pin" 2 51 "int16" `81 
f B "output_low" 2 51 "void(int16 pin)" `80 
v L "pin" 2 52 "int16" `83 
f B "output_high" 2 52 "void(int16 pin)" `82 
v L "pin" 2 53 "int16" `85 
f B "output_toggle" 2 53 "void(int16 pin)" `84 
v L "pin" 2 54 "int16" `87 
v L "level" 2 54 "int8" `88 
f B "output_bit" 2 54 "void(int16 pin,int8 level)" `86 
v L "pin" 2 55 "int16" `90 
f B "output_float" 2 55 "void(int16 pin)" `89 
v L "pin" 2 56 "int16" `92 
f B "output_drive" 2 56 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 59 "5648"
d G "PIN_A1" 2 60 "5649"
d G "PIN_A2" 2 61 "5650"
d G "PIN_A3" 2 62 "5651"
d G "PIN_A4" 2 63 "5652"
d G "PIN_B0" 2 65 "5712"
d G "PIN_B1" 2 66 "5713"
d G "PIN_B2" 2 67 "5714"
d G "PIN_B3" 2 68 "5715"
d G "PIN_B4" 2 69 "5716"
d G "PIN_B5" 2 70 "5717"
d G "PIN_B6" 2 71 "5718"
d G "PIN_B7" 2 72 "5719"
d G "PIN_B8" 2 73 "5720"
d G "PIN_B9" 2 74 "5721"
d G "PIN_B10" 2 75 "5722"
d G "PIN_B11" 2 76 "5723"
d G "PIN_B12" 2 77 "5724"
d G "PIN_B13" 2 78 "5725"
d G "PIN_B14" 2 79 "5726"
d G "PIN_B15" 2 80 "5727"
d G "FALSE" 2 83 "0"
d G "TRUE" 2 84 "1"
d G "BYTE" 2 86 "unsigned int8"
d G "BOOLEAN" 2 87 "int1"
d G "getc" 2 89 "getch"
d G "fgetc" 2 90 "getch"
d G "getchar" 2 91 "getch"
d G "putc" 2 92 "putchar"
d G "fputc" 2 93 "putchar"
d G "fgets" 2 94 "gets"
d G "fputs" 2 95 "puts"
c L "output_drive" 2 5 2 "FUNCTION"
v L "baud" 2 99 "int32" `94 
f B "setup_uart" 2 99 "void(int32 baud)" `93 
v L "baud" 2 100 "int32" `96 
v L "stream" 2 100 "int8" `97 
f G "setup_uart" 2 100 "void(int32 baud,int8 stream)" `95 
v L "baud" 2 101 "int32" `99 
v L "stream" 2 101 "int8" `100 
v L "clock" 2 101 "int32" `101 
f G "setup_uart" 2 101 "void(int32 baud,int8 stream,int32 clock)" `98 
v L "baud" 2 102 "int32" `103 
f B "set_uart_speed" 2 102 "void(int32 baud)" `102 
v L "baud" 2 103 "int32" `105 
v L "stream" 2 103 "int8" `106 
f G "set_uart_speed" 2 103 "void(int32 baud,int8 stream)" `104 
v L "baud" 2 104 "int32" `108 
v L "stream" 2 104 "int8" `109 
v L "clock" 2 104 "int32" `110 
f G "set_uart_speed" 2 104 "void(int32 baud,int8 stream,int32 clock)" `107  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 108 "2"
d G "UART_DATA" 2 109 "4"
d G "UART_AUTODETECT" 2 110 "8"
d G "UART_AUTODETECT_NOWAIT" 2 111 "9"
d G "UART_WAKEUP_ON_RDA" 2 112 "10"
d G "UART_SEND_BREAK" 2 113 "13"
c L "set_uart_speed" 2 5 3 "FUNCTION"
v L "mode" 2 118 "int8" `112 
f B "setup_wdt" 2 118 "void(int8 mode)" `111 
f B "restart_wdt" 2 119 "void()" `113  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 121 "1"
d G "WDT_OFF" 2 122 "0"
d G "WDT_1MS" 2 124 "0x002"
d G "WDT_2MS" 2 125 "0x003"
d G "WDT_4MS" 2 126 "0x004"
d G "WDT_8MS" 2 127 "0x005"
d G "WDT_16MS" 2 128 "0x006"
d G "WDT_32MS" 2 129 "0x007"
d G "WDT_64MS" 2 130 "0x008"
d G "WDT_128MS" 2 131 "0x009"
d G "WDT_256MS" 2 132 "0x00A"
d G "WDT_512MS" 2 133 "0x00B"
d G "WDT_1S" 2 134 "0x00C"
d G "WDT_2S" 2 135 "0x00D"
d G "WDT_4S" 2 136 "0x00E"
d G "WDT_8S" 2 137 "0x00F"
d G "WDT_16S" 2 138 "0x010"
d G "WDT_33S" 2 139 "0x011"
d G "WDT_65S" 2 140 "0x030"
d G "WDT_131S" 2 141 "0x031"
c L "restart_wdt" 2 5 3 "FUNCTION"
f B "restart_cause" 2 146 "int8()" `114 
f B "reset_cpu" 2 147 "void()" `115 
f B "sleep" 2 148 "void()" `116 
v L "mode" 2 149 "int8" `118 
f G "sleep" 2 149 "void(int8 mode)" `117  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 2 151 "0"
d G "RESTART_BROWNOUT" 2 152 "1"
d G "RESTART_WATCHDOG" 2 153 "4"
d G "RESTART_SOFTWARE" 2 154 "6"
d G "RESTART_MCLR" 2 155 "7"
d G "RESTART_ILLEGAL_OP" 2 156 "14"
d G "RESTART_TRAP_CONFLICT" 2 157 "15"
d G "SLEEP_FULL" 2 160 "0" "Default"
d G "SLEEP_IDLE" 2 161 "1" "Clock and peripherals don't stop"
c L "sleep" 2 5 2 "FUNCTION"
v L "type" 2 165 "int8" `120 
v L "target" 2 165 "int32" `121 
f B "setup_oscillator" 2 165 "void(int8 type,int32 target)" `119 
v L "type" 2 166 "int8" `123 
v L "target" 2 166 "int32" `124 
v L "source" 2 166 "int32" `125 
f G "setup_oscillator" 2 166 "void(int8 type,int32 target,int32 source)" `122  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 2 168 "32"
d G "OSC_CRYSTAL" 2 169 "1"
d G "OSC_CLOCK" 2 170 "2"
d G "OSC_RC" 2 171 "3"
d G "OSC_SECONDARY" 2 172 "16"
c L "setup_oscillator" 2 5 4 "FUNCTION"
v L "mode" 2 178 "int16" `127 
f B "setup_timer1" 2 178 "void(int16 mode)" `126 
v L "mode" 2 179 "int16" `129 
v L "period" 2 179 "int16" `130 
f G "setup_timer1" 2 179 "void(int16 mode,int16 period)" `128 
f B "get_timer1" 2 180 "int16()" `131 
v L "value" 2 181 "int16" `133 
f B "set_timer1" 2 181 "void(int16 value)" `132 
v L "mode" 2 182 "int16" `135 
f B "setup_timer2" 2 182 "void(int16 mode)" `134 
v L "mode" 2 183 "int16" `137 
v L "period" 2 183 "int16" `138 
f G "setup_timer2" 2 183 "void(int16 mode,int16 period)" `136 
f B "get_timer2" 2 184 "int16()" `139 
v L "value" 2 185 "int16" `141 
f B "set_timer2" 2 185 "void(int16 value)" `140 
v L "mode" 2 186 "int16" `143 
f B "setup_timer3" 2 186 "void(int16 mode)" `142 
v L "mode" 2 187 "int16" `145 
v L "period" 2 187 "int16" `146 
f G "setup_timer3" 2 187 "void(int16 mode,int16 period)" `144 
f B "get_timer3" 2 188 "int16()" `147 
v L "value" 2 189 "int16" `149 
f B "set_timer3" 2 189 "void(int16 value)" `148 
f B "get_timer23" 2 190 "int32()" `150 
v L "value" 2 191 "int32" `152 
f B "set_timer23" 2 191 "void(int32 value)" `151 
v L "mode" 2 192 "int16" `154 
f B "setup_timer4" 2 192 "void(int16 mode)" `153 
v L "mode" 2 193 "int16" `156 
v L "period" 2 193 "int16" `157 
f G "setup_timer4" 2 193 "void(int16 mode,int16 period)" `155 
f B "get_timer4" 2 194 "int16()" `158 
v L "value" 2 195 "int16" `160 
f B "set_timer4" 2 195 "void(int16 value)" `159 
v L "mode" 2 196 "int16" `162 
f B "setup_timer5" 2 196 "void(int16 mode)" `161 
v L "mode" 2 197 "int16" `164 
v L "period" 2 197 "int16" `165 
f G "setup_timer5" 2 197 "void(int16 mode,int16 period)" `163 
f B "get_timer5" 2 198 "int16()" `166 
v L "value" 2 199 "int16" `168 
f B "set_timer5" 2 199 "void(int16 value)" `167 
f B "get_timer45" 2 200 "int32()" `169 
v L "value" 2 201 "int32" `171 
f B "set_timer45" 2 201 "void(int32 value)" `170  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 2 204 "0x0000"
d G "TMR_INTERNAL" 2 205 "0x8000"
d G "TMR_EXTERNAL" 2 206 "0x8002"
d G "TMR_GATE" 2 207 "0x0040"
d G "TMR_DIV_BY_1" 2 209 "0x0000"
d G "TMR_DIV_BY_8" 2 210 "0x0010"
d G "TMR_DIV_BY_64" 2 211 "0x0020"
d G "TMR_DIV_BY_256" 2 212 "0x0030"
d G "TMR_32_BIT" 2 213 "0x0008" "Only for even numbered timers"
d G "TMR_HALT_IDLE" 2 215 "0x2000"
d G "TMR_CONTINUE_IDLE" 2 216 "0x0000"
d G "T1_EXTERNAL_SYNC" 2 218 "0x8006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 2 219 "0xC002" "This only applies to Timer1"
c L "set_timer45" 2 5 3 "FUNCTION"
v L "module" 2 223 "int8" `173 
v L "mode" 2 223 "int16" `174 
f B "setup_capture" 2 223 "void(int8 module,int16 mode)" `172 
v L "module" 2 224 "int8" `176 
f B "get_capture" 2 224 "int16(int8 module)" `175 
v L "module" 2 225 "int8" `178 
v L "wait" 2 225 "int8" `179 
f G "get_capture" 2 225 "int16(int8 module,int8 wait)" `177  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 2 227 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 2 228 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 2 229 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 2 230 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 2 231 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 2 232 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 2 233 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 2 236 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 2 237 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 2 238 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 2 239 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 2 242 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 2 243 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 2 246 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 2 247 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 5 3 "FUNCTION"
v L "module" 2 252 "int8" `181 
v L "mode" 2 252 "int16" `182 
f B "setup_compare" 2 252 "void(int8 module,int16 mode)" `180 
v L "module" 2 253 "int8" `184 
v L "duty" 2 253 "int16" `185 
f B "set_pwm_duty" 2 253 "void(int8 module,int16 duty)" `183 
v L "module" 2 254 "int8" `187 
v L "ocr" 2 254 "int16" `188 
f B "set_compare_time" 2 254 "void(int8 module,int16 ocr)" `186 
v L "module" 2 255 "int8" `190 
v L "ocr" 2 255 "int16" `191 
v L "ocrs" 2 255 "int16" `192 
f G "set_compare_time" 2 255 "void(int8 module,int16 ocr,int16 ocrs)" `189  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 2 257 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 2 258 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 2 259 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 2 260 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 2 261 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 2 262 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 2 263 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 2 264 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 2 267 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 2 268 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 2 271 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 2 272 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 5 3 "FUNCTION"
v L "mode" 2 277 "int16" `194 
f B "setup_spi" 2 277 "void(int16 mode)" `193 
v L "data" 2 278 "int8" `196 
f B "spi_write" 2 278 "void(int8 data)" `195 
f B "spi_read" 2 279 "int8()" `197 
v L "data" 2 280 "int8" `199 
f G "spi_read" 2 280 "int8(int8 data)" `198 
f B "spi_data_in" 2 281 "int8()" `200 
v L "mode" 2 282 "int16" `202 
f B "setup_spi2" 2 282 "void(int16 mode)" `201 
v L "data" 2 283 "int8" `204 
f B "spi_write2" 2 283 "void(int8 data)" `203 
f B "spi_read2" 2 284 "int8()" `205 
v L "data" 2 285 "int8" `207 
f G "spi_read2" 2 285 "int8(int8 data)" `206 
f B "spi_data_in2" 2 286 "int8()" `208  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 2 289 "0x0020"
d G "SPI_SLAVE" 2 290 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 2 292 "0x0040"
d G "SPI_SCK_IDLE_LOW" 2 293 "0x0000"
d G "SPI_XMIT_L_TO_H" 2 295 "0x0100"
d G "SPI_XMIT_H_TO_L" 2 296 "0x0000"
d G "SPI_MODE_16B" 2 298 "0x0400"
d G "SPI_MODE_8B" 2 299 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 301 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 2 302 "0x0000"
d G "SPI_SS_ENABLED" 2 304 "0x0000"
d G "SPI_SS_DISABLED" 2 305 "0x0080"
d G "SPI_CLK_DIV_1" 2 308 "0x001F"
d G "SPI_CLK_DIV_2" 2 309 "0x001B"
d G "SPI_CLK_DIV_3" 2 310 "0x0017"
d G "SPI_CLK_DIV_4" 2 311 "0x001E"
d G "SPI_CLK_DIV_5" 2 312 "0x000F"
d G "SPI_CLK_DIV_6" 2 313 "0x000B"
d G "SPI_CLK_DIV_7" 2 314 "0x0007"
d G "SPI_CLK_DIV_8" 2 315 "0x0003"
d G "SPI_CLK_DIV_12" 2 316 "0x0016"
d G "SPI_CLK_DIV_16" 2 317 "0x001D"
d G "SPI_CLK_DIV_20" 2 318 "0x000E"
d G "SPI_CLK_DIV_24" 2 319 "0x000A"
d G "SPI_CLK_DIV_28" 2 320 "0x0006"
d G "SPI_CLK_DIV_32" 2 321 "0x0002"
d G "SPI_CLK_DIV_48" 2 322 "0x0015"
d G "SPI_CLK_DIV_64" 2 323 "0x001C"
d G "SPI_CLK_DIV_80" 2 324 "0x000D"
d G "SPI_CLK_DIV_96" 2 325 "0x0009"
d G "SPI_CLK_DIV_112" 2 326 "0x0005"
d G "SPI_CLK_DIV_128" 2 327 "0x0001"
d G "SPI_CLK_DIV_192" 2 328 "0x0014"
d G "SPI_CLK_DIV_256" 2 329 "0x0010"
d G "SPI_CLK_DIV_320" 2 330 "0x000C"
d G "SPI_CLK_DIV_384" 2 331 "0x0008"
d G "SPI_CLK_DIV_448" 2 332 "0x0004"
d G "SPI_CLK_DIV_512" 2 333 "0x0000"
d G "SPI_L_TO_H" 2 336 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 337 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 5 4 "FUNCTION"
v L "mode" 2 343 "int32" `210 
f B "setup_adc" 2 343 "void(int32 mode)" `209 
v L "pins" 2 344 "int32" `212 
f B "setup_adc_ports" 2 344 "void(int32 pins)" `211 
v L "pins" 2 345 "int32" `214 
v L "reference" 2 345 "int16" `215 
f G "setup_adc_ports" 2 345 "void(int32 pins,int16 reference)" `213 
v L "??65535" 2 346 "int8" `217 
f B "set_adc_channel" 2 346 "void(int8 )" `216 
f B "read_adc" 2 347 "int16()" `218 
v L "mode" 2 348 "int8" `220 
f G "read_adc" 2 348 "int16(int8 mode)" `219 
f B "adc_done" 2 349 "int8()" `221  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 353 "0x10000"
d G "ADC_CLOCK" 2 354 "0x0000"
d G "ADC_CLOCK_DIV_2" 2 355 "0x0001"
d G "ADC_CLOCK_DIV_4" 2 356 "0x0003"
d G "ADC_CLOCK_DIV_8" 2 357 "0x0007"
d G "ADC_CLOCK_DIV_16" 2 358 "0x000F"
d G "ADC_CLOCK_DIV_32" 2 359 "0x001F"
d G "ADC_CLOCK_DIV_64" 2 360 "0x003F"
d G "ADC_CLOCK_INTERNAL" 2 361 "0x8000" "Internal"
d G "ADC_TAD_MUL_0" 2 365 "0x1F00"
d G "ADC_TAD_MUL_2" 2 366 "0x1D00"
d G "ADC_TAD_MUL_4" 2 367 "0x1B00"
d G "ADC_TAD_MUL_8" 2 368 "0x1700"
d G "ADC_TAD_MUL_16" 2 369 "0x0F00"
d G "ADC_TAD_MUL_31" 2 370 "0x0000"
d G "ADC_START_AND_READ" 2 373 "0x07"
d G "ADC_START_ONLY" 2 374 "0x01"
d G "ADC_READ_ONLY" 2 375 "0x06"
d G "NO_ANALOGS" 2 380 "0" "None"
d G "ALL_ANALOG" 2 381 "0xFFFFFFFF" "All"
d G "sAN0" 2 382 "0x00000001" "| A0"
d G "sAN1" 2 383 "0x00000002" "| A1"
d G "sAN2" 2 384 "0x00000004" "| B0"
d G "sAN3" 2 385 "0x00000008" "| B1"
d G "sAN4" 2 386 "0x00000010" "| B2"
d G "sAN5" 2 387 "0x00000020" "| B3"
d G "sAN9" 2 388 "0x00000200" "| B15"
d G "sAN10" 2 389 "0x00000400" "| B14"
d G "sAN11" 2 390 "0x00000800" "| B13"
d G "sAN12" 2 391 "0x00001000" "| B12"
d G "VSS_VDD" 2 394 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 2 395 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 2 396 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 2 397 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 5 4 "FUNCTION"
v L "mode" 2 403 "int16" `223 
f B "setup_comparator" 2 403 "void(int16 mode)" `222  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 405 "0x00"
d G "A4_A5_NC_NC" 2 406 "0x201"
d G "A4_VR_NC_NC" 2 407 "0x200"
d G "A5_VR_NC_NC" 2 408 "0x202"
d G "NC_NC_A2_A3" 2 409 "0x804"
d G "NC_NC_A2_VR" 2 410 "0x800"
d G "NC_NC_A3_VR" 2 411 "0x808"
d G "A4_A5_A2_A3" 2 412 "A4_A5_NC_NC | NC_NC_A2_A3"
d G "A4_VR_A2_VR" 2 413 "A4_VR_NC_NC | NC_NC_A2_VR"
d G "A5_VR_A3_VR" 2 414 "A5_VR_NC_NC |  NC_NC_A3_VR"
d G "C1_INVERT" 2 416 "0x10"
d G "C2_INVERT" 2 417 "0x20"
d G "C1_OUTPUT" 2 418 "0x40"
d G "C2_OUTPUT" 2 419 "0x80"
c L "setup_comparator" 2 5 4 "FUNCTION"
v L "mode" 2 426 "int16" `225 
f B "setup_vref" 2 426 "void(int16 mode)" `224  "Constants used in setup_vref() are:"
d G "VREF_DISABLED" 2 428 "0x0000"
d G "VREF_VSS_VDD" 2 429 "0x0080"
d G "VREF_ANALOG" 2 430 "0x0090"
d G "VREF_HIGH" 2 432 "0x0080"
d G "VREF_LOW" 2 433 "0x00A0"
d G "VREF_OUTPUT" 2 435 "0x0040"
c L "setup_vref" 2 5 7 "FUNCTION"
v L "mode" 2 444 "int32" `227 
v L "address_mask" 2 444 "int16" `228 
f B "setup_pmp" 2 444 "void(int32 mode,int16 address_mask)" `226 
v L "address" 2 445 "int16" `230 
f B "pmp_address" 2 445 "void(int16 address)" `229 
f B "pmp_read" 2 446 "int8()" `231 
v L "data" 2 447 "int8" `233 
f B "pmp_write" 2 447 "void(int8 data)" `232 
f B "pmp_output_full" 2 448 "int8()" `234 
f B "pmp_input_full" 2 449 "int8()" `235 
f B "pmp_overflow" 2 450 "int8()" `236 
v L "mode" 2 451 "int32" `238 
v L "address_mask" 2 451 "int16" `239 
f B "setup_psp" 2 451 "void(int32 mode,int16 address_mask)" `237 
f B "psp_read" 2 452 "int8()" `240 
v L "address" 2 453 "int16" `242 
f G "psp_read" 2 453 "int8(int16 address)" `241 
v L "data" 2 454 "int8" `244 
f B "psp_write" 2 454 "void(int8 data)" `243 
v L "data" 2 455 "int8" `246 
v L "address" 2 455 "int16" `247 
f G "psp_write" 2 455 "void(int8 data,int16 address)" `245 
f B "psp_output_full" 2 456 "int8()" `248 
f B "psp_input_full" 2 457 "int8()" `249 
f B "psp_overflow" 2 458 "int8()" `250  "Constants used in SETUP_PMP() and SETUP_PSP() are:"
d G "PAR_ENABLE" 2 460 "0x8000"
d G "PAR_DISABLE" 2 461 "0x0000" "Module enable/disable options"
d G "PAR_STOP_IN_IDLE" 2 462 "0x2000"
d G "PAR_CONTINUE_IN_IDLE" 2 463 "0x0000"
d G "PAR_ADDR_NOT_MULTIPLEXED" 2 464 "0x0000" "Address multiplexing options"
d G "PAR_LOW_ADDR_MULTIPLEXED" 2 465 "0x0800" "Address multiplexing options"
d G "PAR_FULL_ADDR_MULTIPLEXED" 2 466 "0x1000" "Address multiplexing options"
d G "PAR_PTBEEN_ENABLE" 2 467 "0x0400" "Byte Enable Port Enable bit"
d G "PAR_PTWREN_ENABLE" 2 468 "0x0200" "Write Enable Strobe bit"
d G "PAR_PTRDEN_ENABLE" 2 469 "0x0100" "Read/Write Strobe Port bit"
d G "PAR_ALP_ACTIVE_HIGH" 2 470 "0x0020" "Address latch polarity high"
d G "PAR_BEP_ACTIVE_HIGH" 2 471 "0x0004" "Byte Enable Polarity"
d G "PAR_WRSP_ACTIVE_HIGH" 2 472 "0x0002" "Write strobe Polarity bit"
d G "PAR_RDSP_ACTIVE_HIGH" 2 473 "0x0001" "Read strobe Polarity bit"
d G "PAR_CS_XX" 2 474 "0x0000" "Chip select pins used for address"
d G "PAR_CS_X1" 2 475 "0x0008" "Chip select pin 1 used, active high"
d G "PAR_CS_X0" 2 476 "0x0000" "Chip select pin 1 used, active low"
d G "PAR_CS_1X" 2 477 "0x0050" "Chip select pin 2 used, active high"
d G "PAR_CS_0X" 2 478 "0x0040" "Chip select pin 2 used, active low"
d G "PAR_CS_00" 2 479 "0x0080" "Chip select pins 1,2 used, active low"
d G "PAR_CS_11" 2 480 "0x0098" "Chip select pins 1,2 used, active high"
d G "PAR_CS_10" 2 481 "0x0090" "Chip select pins 1,2 used, 1 is active low, 2 is high"
d G "PAR_CS_01" 2 482 "0x0088" "Chip select pins 1,2 used, 1 is active high, 2 is low"
d G "PAR_INTR_ON_RW" 2 483 "0x20000000" "Interrupt on read write"
d G "PAR_NO_INTR_STALL_ACTIVATED" 2 484 "0x40000000" "No interrupt, processor stall activated"
d G "PAR_INTR_ON_3_RW_BUF" 2 485 "0x60000000" "Interrupt on write to Buffer 3 or read from Buffer 3"
d G "PAR_PSP_AUTO_INC" 2 486 "0x18000000" "Read write buffers auto increment"
d G "PAR_DEC_ADDR" 2 487 "0x10000000" "Increment the address"
d G "PAR_INC_ADDR" 2 488 "0x08000000" "Decrement the address"
d G "PAR_MASTER_MODE_1" 2 489 "0x03000000" "Master mode 1"
d G "PAR_MASTER_MODE_2" 2 490 "0x02000000" "Master mode 2"
d G "PAR_WAITB1" 2 491 "0x00000000" "1 Tcy Wait state for data setup R/W"
d G "PAR_WAITB2" 2 492 "0x00400000" "2 Tcy Wait state for data setup R/W"
d G "PAR_WAITB3" 2 493 "0x00800000" "3 Tcy Wait state for data setup R/W"
d G "PAR_WAITB4" 2 494 "0x00C00000" "4 Tcy Wait state for data setup R/W"
d G "PAR_WAITM0" 2 495 "0x00000000" "0 wait state for Read to byte"
d G "PAR_WAITM1" 2 496 "0x00040000" "1 Tcy wait state for Read to byte"
d G "PAR_WAITM2" 2 497 "0x00080000" "2 Tcy wait state for Read to byte"
d G "PAR_WAITM3" 2 498 "0x000C0000" "3 Tcy wait state for Read to byte"
d G "PAR_WAITM15" 2 499 "0x003C0000" "15 wait states"
d G "PAR_WAITE1" 2 500 "0x00000000" "1 Tcy Wait for data hold after strobe"
d G "PAR_WAITE2" 2 501 "0x00010000" "2 Tcy Wait for data hold after strobe"
d G "PAR_WAITE3" 2 502 "0x00020000" "3 Tcy Wait for data hold after strobe"
d G "PAR_WAITE4" 2 503 "0x00030000" "4 Tcy Wait for data hold after strobe"
c L "psp_overflow" 2 5 3 "FUNCTION"
v L "poly_terms" 2 508 "int8" `252 
f B "setup_crc" 2 508 "void(int8 poly_terms,*int8 _VA_LIST)" `251 
v L "value" 2 509 "int16" `255 
f B "crc_init" 2 509 "void(int16 value)" `254 
v L "data" 2 510 "int16" `257 
f B "crc_calc" 2 510 "int16(int16 data)" `256 
v L "ptr" 2 511 "*int16" `259 
v L "count" 2 511 "int16" `260 
f G "crc_calc" 2 511 "int16(*int16 ptr,int16 count)" `258 
v L "data" 2 512 "int8" `262 
f B "crc_calc8" 2 512 "int8(int8 data)" `261 
v L "ptr" 2 513 "*int8" `264 
v L "count" 2 513 "int16" `265 
f G "crc_calc8" 2 513 "int8(*int8 ptr,int16 count)" `263  "RTC"
c L "crc_calc8" 2 5 3 "FUNCTION"
c L "crc_calc8" 2 5 1 "FUNCTION"
c L "crc_calc8" 2 5 1 "FUNCTION"
t G "rtc_time_t" 2 529 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `276  "RTC Protoyptes:"
v L "mode" 2 531 "int16" `278 
v L "calibration" 2 531 "int8" `279 
f B "setup_rtc" 2 531 "void(int16 mode,int8 calibration)" `277 
v L "mode" 2 532 "int16" `281 
v L "mask" 2 532 "int16" `282 
v L "repeat" 2 532 "int8" `283 
f B "setup_rtc_alarm" 2 532 "void(int16 mode,int16 mask,int8 repeat)" `280 
v L "time" 2 533 "*rtc_time_t" `285 
f B "rtc_read" 2 533 "void(*rtc_time_t time)" `284 
v L "time" 2 534 "*rtc_time_t" `287 
f B "rtc_write" 2 534 "void(*rtc_time_t time)" `286 
v L "time" 2 535 "*rtc_time_t" `289 
f B "rtc_read_alarm" 2 535 "void(*rtc_time_t time)" `288 
v L "time" 2 536 "*rtc_time_t" `291 
f B "rtc_write_alarm" 2 536 "void(*rtc_time_t time)" `290  "Constants used in setup_rtc() are:  // Second param is calibration"
d G "RTC_ENABLE" 2 538 "0x8000"
d G "RTC_DISABLE" 2 539 "0"
d G "RTC_OUTPUT_SECONDS" 2 540 "0x20400"
d G "RTC_OUTPUT_ALARM" 2 541 "0x00400"
d G "RTC_ALARM_ENABLE" 2 544 "0x8000"
d G "RTC_ALARM_DISABLE" 2 545 "0"
d G "RTC_CHIME_ENABLE" 2 546 "0x4000"
d G "RTC_CHIME_DISABLE" 2 547 "0"
d G "RTC_ALARM_HALFSECOND" 2 549 "0x0000"
d G "RTC_ALARM_SECOND" 2 550 "0x0400"
d G "RTC_ALARM_10_SECONDS" 2 551 "0x0800"
d G "RTC_ALARM_MINUTE" 2 552 "0x0C00"
d G "RTC_ALARM_10_MINUTES" 2 553 "0x1000"
d G "RTC_ALARM_HOUR" 2 554 "0x1400"
d G "RTC_ALARM_DAY" 2 555 "0x1800"
d G "RTC_ALARM_WEEK" 2 556 "0x1C00"
d G "RTC_ALARM_MONTH" 2 557 "0x2000"
d G "RTC_ALARM_YEAR" 2 558 "0x2400"
c L "rtc_write_alarm" 2 5 3 "FUNCTION"
v L "x" 2 564 "sint8" `293 
f B "abs" 2 564 "sint8(sint8 x)" `292 
v L "x" 2 565 "sint16" `295 
f G "abs" 2 565 "sint16(sint16 x)" `294 
v L "x" 2 566 "sint32" `297 
f G "abs" 2 566 "sint32(sint32 x)" `296 
v L "x" 2 567 "float" `299 
f G "abs" 2 567 "float(float x)" `298 
v L "??65535" 2 568 "int8" `301 
v L "??65535" 2 568 "int8" `302 
f B "_mul" 2 568 "int16(int8 ,int8 )" `300 
v L "??65535" 2 569 "sint8" `301 
v L "??65535" 2 569 "sint8" `305 
f G "_mul" 2 569 "sint16(sint8 ,sint8 )" `303 
v L "??65535" 2 570 "int16" `301 
v L "??65535" 2 570 "int16" `308 
f G "_mul" 2 570 "int32(int16 ,int16 )" `306 
v L "??65535" 2 571 "sint16" `301 
v L "??65535" 2 571 "sint16" `311 
f G "_mul" 2 571 "sint32(sint16 ,sint16 )" `309 
v L "x" 2 572 "?" `313 
f G "abs" 2 572 "?(? x)" `312 
v L "x" 2 573 "?" `315 
f G "abs" 2 573 "?(? x)" `314 
v L "x" 2 574 "?" `317 
f G "abs" 2 574 "?(? x)" `316 
v L "x" 2 575 "?" `319 
f G "abs" 2 575 "?(? x)" `318 
v L "??65535" 2 576 "int32" `301 
v L "??65535" 2 576 "int32" `322 
f G "_mul" 2 576 "?(int32 ,int32 )" `320 
v L "??65535" 2 577 "sint32" `301 
v L "??65535" 2 577 "sint32" `325 
f G "_mul" 2 577 "?(sint32 ,sint32 )" `323 
v L "??65535" 2 578 "?" `301 
v L "??65535" 2 578 "?" `328 
f G "_mul" 2 578 "?(? ,? )" `326 
v L "??65535" 2 579 "?" `301 
v L "??65535" 2 579 "?" `331 
f G "_mul" 2 579 "?(? ,? )" `329  "Memory Manipulation Prototypes:"
v L "dest" 2 582 "*sint8" `333 
v L "src" 2 582 "*sint8" `334 
f B "strcpy" 2 582 "void(*sint8 dest,*sint8 src)" `332 
v L "dest" 2 583 "*sint8" `336 
v L "src" 2 583 "*sint8" `337 
f B "strcopy" 2 583 "void(*sint8 dest,*sint8 src)" `335 
v L "destination" 2 584 "*int8" `339 
v L "value" 2 584 "int8" `340 
v L "num" 2 584 "int16" `341 
f B "memset" 2 584 "void(*int8 destination,int8 value,int16 num)" `338 
v L "destination" 2 585 "*int8" `343 
v L "source" 2 585 "*int8" `344 
v L "num" 2 585 "int16" `345 
f B "memcpy" 2 585 "void(*int8 destination,*int8 source,int16 num)" `342  "Data Manipulators Prototypes:"
v L "address" 2 588 "*int8" `347 
v L "bytes" 2 588 "int8" `348 
v L "value" 2 588 "int8" `349 
f B "shift_left" 2 588 "int8(*int8 address,int8 bytes,int8 value)" `346 
v L "address" 2 589 "*int8" `351 
v L "bytes" 2 589 "int8" `352 
v L "value" 2 589 "int8" `353 
f B "shift_right" 2 589 "int8(*int8 address,int8 bytes,int8 value)" `350 
v L "address" 2 590 "*int8" `355 
v L "bytes" 2 590 "int8" `356 
f B "rotate_left" 2 590 "void(*int8 address,int8 bytes)" `354 
v L "address" 2 591 "*int8" `358 
v L "bytes" 2 591 "int8" `359 
f B "rotate_right" 2 591 "void(*int8 address,int8 bytes)" `357 
v L "value" 2 592 "int8" `361 
f B "swap" 2 592 "void(int8 value)" `360 
v L "var" 2 593 "int16" `363 
v L "offset" 2 593 "int8" `364 
f B "make8" 2 593 "int8(int16 var,int8 offset)" `362 
v L "var" 2 594 "int32" `363 
v L "offset" 2 594 "int8" `367 
f G "make8" 2 594 "int8(int32 var,int8 offset)" `365 
v L "varhigh" 2 595 "int8" `369 
v L "varlow" 2 595 "int8" `370 
f B "make16" 2 595 "int16(int8 varhigh,int8 varlow)" `368 
v L "var1" 2 596 "int16" `372 
f B "make32" 2 596 "int32(int16 var1)" `371 
v L "var1" 2 597 "int16" `374 
v L "var2" 2 597 "int16" `375 
f G "make32" 2 597 "int32(int16 var1,int16 var2)" `373 
v L "var1" 2 598 "int16" `374 
v L "var2" 2 598 "int8" `378 
f G "make32" 2 598 "int32(int16 var1,int8 var2)" `376 
v L "var1" 2 599 "int16" `380 
v L "var2" 2 599 "int8" `381 
v L "var3" 2 599 "int8" `382 
f G "make32" 2 599 "int32(int16 var1,int8 var2,int8 var3)" `379 
v L "var1" 2 600 "int8" `384 
f G "make32" 2 600 "int32(int8 var1)" `383 
v L "var1" 2 601 "int8" `374 
v L "var2" 2 601 "int8" `387 
f G "make32" 2 601 "int32(int8 var1,int8 var2)" `385 
v L "var1" 2 602 "int8" `380 
v L "var2" 2 602 "int8" `381 
v L "var3" 2 602 "int8" `391 
f G "make32" 2 602 "int32(int8 var1,int8 var2,int8 var3)" `388 
v L "var1" 2 603 "int8" `393 
v L "var2" 2 603 "int8" `394 
v L "var3" 2 603 "int8" `395 
v L "var4" 2 603 "int8" `396 
f G "make32" 2 603 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `392 
v L "var1" 2 604 "int8" `374 
v L "var2" 2 604 "int16" `399 
f G "make32" 2 604 "int32(int8 var1,int16 var2)" `397 
v L "var1" 2 605 "int8" `380 
v L "var2" 2 605 "int16" `381 
v L "var3" 2 605 "int8" `403 
f G "make32" 2 605 "int32(int8 var1,int16 var2,int8 var3)" `400 
v L "var1" 2 606 "int8" `380 
v L "var2" 2 606 "int8" `381 
v L "var3" 2 606 "int16" `407 
f G "make32" 2 606 "int32(int8 var1,int8 var2,int16 var3)" `404 
v L "var" 2 607 "int8" `409 
v L "bit" 2 607 "int8" `410 
f B "bit_set" 2 607 "void(int8 var,int8 bit)" `408 
v L "var" 2 608 "int16" `409 
v L "bit" 2 608 "int8" `413 
f G "bit_set" 2 608 "void(int16 var,int8 bit)" `411 
v L "var" 2 609 "int32" `409 
v L "bit" 2 609 "int8" `416 
f G "bit_set" 2 609 "void(int32 var,int8 bit)" `414 
v L "var" 2 610 "int8" `418 
v L "bit" 2 610 "int8" `419 
f B "bit_clear" 2 610 "void(int8 var,int8 bit)" `417 
v L "var" 2 611 "int16" `418 
v L "bit" 2 611 "int8" `422 
f G "bit_clear" 2 611 "void(int16 var,int8 bit)" `420 
v L "var" 2 612 "int32" `418 
v L "bit" 2 612 "int8" `425 
f G "bit_clear" 2 612 "void(int32 var,int8 bit)" `423 
v L "var" 2 613 "int8" `427 
v L "bit" 2 613 "int8" `428 
f B "bit_test" 2 613 "int8(int8 var,int8 bit)" `426 
v L "var" 2 614 "int16" `427 
v L "bit" 2 614 "int8" `431 
f G "bit_test" 2 614 "int8(int16 var,int8 bit)" `429 
v L "var" 2 615 "int32" `427 
v L "bit" 2 615 "int8" `434 
f G "bit_test" 2 615 "int8(int32 var,int8 bit)" `432 
v L "var" 2 616 "?" `409 
v L "bit" 2 616 "int8" `437 
f G "bit_set" 2 616 "void(? var,int8 bit)" `435 
v L "var" 2 617 "?" `409 
v L "bit" 2 617 "int8" `440 
f G "bit_set" 2 617 "void(? var,int8 bit)" `438 
v L "var" 2 618 "?" `418 
v L "bit" 2 618 "int8" `443 
f G "bit_clear" 2 618 "void(? var,int8 bit)" `441 
v L "var" 2 619 "?" `418 
v L "bit" 2 619 "int8" `446 
f G "bit_clear" 2 619 "void(? var,int8 bit)" `444 
v L "var" 2 620 "?" `427 
v L "bit" 2 620 "int8" `449 
f G "bit_test" 2 620 "int8(? var,int8 bit)" `447 
v L "var" 2 621 "?" `427 
v L "bit" 2 621 "int8" `452 
f G "bit_test" 2 621 "int8(? var,int8 bit)" `450 
v L "value" 2 622 "int8" `454 
v L "var" 2 622 "int16" `455 
f B "bit_first" 2 622 "int8(int8 value,int16 var)" `453 
v L "var" 2 623 "sint16" `457 
f B "bit_last" 2 623 "int8(sint16 var)" `456 
v L "value" 2 624 "int8" `459 
v L "var" 2 624 "sint16" `460 
f G "bit_last" 2 624 "int8(int8 value,sint16 var)" `458  "#use delay() Prototypes:"
v L "count" 2 627 "int16" `462 
f B "delay_cycles" 2 627 "void(int16 count)" `461 
v L "time" 2 628 "int16" `464 
f B "delay_ms" 2 628 "void(int16 time)" `463 
v L "time" 2 629 "int16" `466 
f B "delay_us" 2 629 "void(int16 time)" `465  "#use rs232() Prototypes:"
v L "cdata" 2 632 "sint8" `468 
f B "putchar" 2 632 "void(sint8 cdata)" `467 
v L "cdata" 2 633 "sint8" `470 
v L "stream" 2 633 "int8" `471 
f G "putchar" 2 633 "void(sint8 cdata,int8 stream)" `469 
v L "string" 2 634 "*sint8" `473 
f B "puts" 2 634 "void(*sint8 string)" `472 
v L "string" 2 635 "*sint8" `475 
v L "stream" 2 635 "int8" `476 
f G "puts" 2 635 "void(*sint8 string,int8 stream)" `474 
f B "getch" 2 636 "sint8()" `477 
v L "stream" 2 637 "int8" `479 
f G "getch" 2 637 "sint8(int8 stream)" `478 
v L "string" 2 638 "*sint8" `481 
f B "gets" 2 638 "void(*sint8 string)" `480 
v L "string" 2 639 "*sint8" `483 
v L "stream" 2 639 "int8" `484 
f G "gets" 2 639 "void(*sint8 string,int8 stream)" `482 
f B "kbhit" 2 640 "int8()" `485 
v L "stream" 2 641 "int8" `487 
f G "kbhit" 2 641 "int8(int8 stream)" `486 
v L "string" 2 642 "*sint8" `489 
f B "printf" 2 642 "void(*sint8 string,*int8 _VA_LIST)" `488 
v L "stream" 2 643 "int8" `492 
v L "string" 2 643 "*sint8" `493 
f B "fprintf" 2 643 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `491 
f B "putc_send" 2 644 "void()" `495 
v L "stream" 2 645 "int8" `497 
f B "fputc_send" 2 645 "void(int8 stream)" `496 
f B "rcv_buffer_full" 2 646 "int8()" `498 
v L "stream" 2 647 "int8" `500 
f G "rcv_buffer_full" 2 647 "int8(int8 stream)" `499 
f B "rcv_buffer_bytes" 2 648 "int16()" `501 
v L "stream" 2 649 "int8" `503 
f G "rcv_buffer_bytes" 2 649 "int16(int8 stream)" `502 
f B "tx_buffer_full" 2 650 "int8()" `504 
v L "stream" 2 651 "int8" `506 
f G "tx_buffer_full" 2 651 "int8(int8 stream)" `505 
f B "tx_buffer_bytes" 2 652 "int16()" `507 
v L "stream" 2 653 "int8" `509 
f G "tx_buffer_bytes" 2 653 "int16(int8 stream)" `508  "#use i2c() Prototypes:"
f B "i2c_read" 2 656 "int8()" `510 
v L "stream" 2 657 "int8" `512 
f G "i2c_read" 2 657 "int8(int8 stream)" `511 
v L "stream" 2 658 "int8" `514 
v L "ack" 2 658 "int8" `515 
f G "i2c_read" 2 658 "int8(int8 stream,int8 ack)" `513 
v L "data" 2 659 "int8" `517 
f B "i2c_write" 2 659 "int8(int8 data)" `516 
v L "stream" 2 660 "int8" `519 
v L "data" 2 660 "int8" `520 
f G "i2c_write" 2 660 "int8(int8 stream,int8 data)" `518 
f B "i2c_start" 2 661 "void()" `521 
v L "stream" 2 662 "int8" `523 
f G "i2c_start" 2 662 "void(int8 stream)" `522 
v L "stream" 2 663 "int8" `525 
v L "restart" 2 663 "int8" `526 
f G "i2c_start" 2 663 "void(int8 stream,int8 restart)" `524 
f B "i2c_stop" 2 664 "void()" `527 
v L "stream" 2 665 "int8" `529 
f G "i2c_stop" 2 665 "void(int8 stream)" `528 
f B "i2c_isr_state" 2 666 "sint8()" `530 
v L "addr" 2 667 "int8" `532 
f B "i2c_slaveaddr" 2 667 "void(int8 addr)" `531 
v L "stream" 2 668 "int8" `534 
v L "addr" 2 668 "int8" `535 
f G "i2c_slaveaddr" 2 668 "void(int8 stream,int8 addr)" `533 
f B "i2c_poll" 2 669 "int8()" `536 
v L "stream" 2 670 "int8" `538 
f G "i2c_poll" 2 670 "int8(int8 stream)" `537 
v L "baud" 2 671 "int32" `540 
f B "i2c_init" 2 671 "void(int32 baud)" `539 
v L "stream" 2 672 "int8" `542 
v L "baud" 2 672 "int32" `543 
f G "i2c_init" 2 672 "void(int8 stream,int32 baud)" `541  "#use spi() Prototypes:"
f B "spi_xfer" 2 675 "int8()" `544 
f G "spi_xfer" 2 676 "int16()" `545 
f G "spi_xfer" 2 677 "int32()" `546 
v L "data" 2 678 "int8" `548 
f G "spi_xfer" 2 678 "int8(int8 data)" `547 
v L "data" 2 679 "int16" `550 
f G "spi_xfer" 2 679 "int16(int16 data)" `549 
v L "data" 2 680 "int32" `552 
f G "spi_xfer" 2 680 "int32(int32 data)" `551 
v L "stream" 2 681 "int8" `554 
v L "data" 2 681 "int8" `555 
f G "spi_xfer" 2 681 "int8(int8 stream,int8 data)" `553 
v L "stream" 2 682 "int8" `554 
v L "data" 2 682 "int16" `558 
f G "spi_xfer" 2 682 "int16(int8 stream,int16 data)" `556 
v L "stream" 2 683 "int8" `554 
v L "data" 2 683 "int32" `561 
f G "spi_xfer" 2 683 "int32(int8 stream,int32 data)" `559 
v L "stream" 2 684 "int8" `563 
v L "data" 2 684 "int8" `564 
v L "bits" 2 684 "int8" `565 
f G "spi_xfer" 2 684 "int8(int8 stream,int8 data,int8 bits)" `562 
v L "stream" 2 685 "int8" `563 
v L "data" 2 685 "int16" `564 
v L "bits" 2 685 "int8" `569 
f G "spi_xfer" 2 685 "int16(int8 stream,int16 data,int8 bits)" `566 
v L "stream" 2 686 "int8" `563 
v L "data" 2 686 "int32" `564 
v L "bits" 2 686 "int8" `573 
f G "spi_xfer" 2 686 "int32(int8 stream,int32 data,int8 bits)" `570 
v L "baud" 2 687 "int32" `575 
f B "spi_init" 2 687 "void(int32 baud)" `574 
v L "stream" 2 688 "int8" `577 
v L "baud" 2 688 "int32" `578 
f G "spi_init" 2 688 "void(int8 stream,int32 baud)" `576 
v L "baud" 2 689 "int32" `580 
f B "spi_speed" 2 689 "void(int32 baud)" `579 
v L "stream" 2 690 "int8" `582 
v L "baud" 2 690 "int32" `583 
f G "spi_speed" 2 690 "void(int8 stream,int32 baud)" `581 
v L "stream" 2 691 "int8" `585 
v L "baud" 2 691 "int32" `586 
v L "clock" 2 691 "int32" `587 
f G "spi_speed" 2 691 "void(int8 stream,int32 baud,int32 clock)" `584 
v L "data" 2 692 "int8" `589 
f B "spi_prewrite" 2 692 "void(int8 data)" `588 
v L "data" 2 693 "int16" `591 
f G "spi_prewrite" 2 693 "void(int16 data)" `590 
v L "data" 2 694 "int32" `593 
f G "spi_prewrite" 2 694 "void(int32 data)" `592 
v L "??65535" 2 695 "int8" `595 
v L "data" 2 695 "int8" `596 
f G "spi_prewrite" 2 695 "void(int8 ,int8 data)" `594 
v L "??65535" 2 696 "int8" `595 
v L "data" 2 696 "int16" `599 
f G "spi_prewrite" 2 696 "void(int8 ,int16 data)" `597 
v L "??65535" 2 697 "int8" `595 
v L "data" 2 697 "int32" `602 
f G "spi_prewrite" 2 697 "void(int8 ,int32 data)" `600 
f B "spi_xfer_in" 2 698 "int8()" `603 
f G "spi_xfer_in" 2 699 "int16()" `604 
f G "spi_xfer_in" 2 700 "int32()" `605 
v L "bits" 2 701 "int8" `607 
f G "spi_xfer_in" 2 701 "int8(int8 bits)" `606 
v L "bits" 2 702 "int8" `609 
f G "spi_xfer_in" 2 702 "int16(int8 bits)" `608 
v L "bits" 2 703 "int8" `611 
f G "spi_xfer_in" 2 703 "int32(int8 bits)" `610 
v L "stream" 2 704 "int8" `613 
v L "bits" 2 704 "int8" `614 
f G "spi_xfer_in" 2 704 "int8(int8 stream,int8 bits)" `612 
v L "stream" 2 705 "int8" `613 
v L "bits" 2 705 "int8" `617 
f G "spi_xfer_in" 2 705 "int16(int8 stream,int8 bits)" `615 
v L "stream" 2 706 "int8" `613 
v L "bits" 2 706 "int8" `620 
f G "spi_xfer_in" 2 706 "int32(int8 stream,int8 bits)" `618  "#use rtos() Prototypes:"
f B "rtos_run" 2 709 "void()" `621 
f B "rtos_yield" 2 710 "void()" `622 
v L "task" 2 711 "int8" `624 
f B "rtos_enable" 2 711 "void(int8 task)" `623 
v L "task" 2 712 "int8" `626 
f B "rtos_disable" 2 712 "void(int8 task)" `625 
f B "rtos_terminate" 2 713 "void()" `627 
v L "flag" 2 714 "int8" `629 
f B "rtos_await" 2 714 "void(int8 flag)" `628 
v L "sem" 2 715 "int8" `631 
f B "rtos_wait" 2 715 "void(int8 sem)" `630 
v L "sem" 2 716 "int8" `633 
f B "rtos_signal" 2 716 "void(int8 sem)" `632 
v L "task" 2 717 "int8" `635 
v L "msg" 2 717 "int8" `636 
f B "rtos_msg_send" 2 717 "void(int8 task,int8 msg)" `634 
f B "rtos_msg_read" 2 718 "int8()" `637 
f B "rtos_msg_poll" 2 719 "int8()" `638 
v L "task" 2 720 "int8" `640 
f B "rtos_overrun" 2 720 "int8(int8 task)" `639 
v L "task" 2 721 "int8" `642 
v L "stat" 2 721 "*int8" `643 
f B "rtos_stats" 2 721 "void(int8 task,*int8 stat)" `641  "#use timer() Prototypes:"
f B "get_ticks" 2 724 "int8()" `644 
f G "get_ticks" 2 725 "int16()" `645 
f G "get_ticks" 2 726 "int32()" `646 
f G "get_ticks" 2 727 "?()" `647 
v L "stream" 2 728 "int8" `649 
f G "get_ticks" 2 728 "int8(int8 stream)" `648 
v L "stream" 2 729 "int8" `651 
f G "get_ticks" 2 729 "int16(int8 stream)" `650 
v L "stream" 2 730 "int8" `653 
f G "get_ticks" 2 730 "int32(int8 stream)" `652 
v L "stream" 2 731 "int8" `655 
f G "get_ticks" 2 731 "?(int8 stream)" `654 
v L "value" 2 732 "int8" `657 
f B "set_ticks" 2 732 "void(int8 value)" `656 
v L "value" 2 733 "int16" `659 
f G "set_ticks" 2 733 "void(int16 value)" `658 
v L "value" 2 734 "int32" `661 
f G "set_ticks" 2 734 "void(int32 value)" `660 
v L "value" 2 735 "?" `663 
f G "set_ticks" 2 735 "void(? value)" `662 
v L "stream" 2 736 "int8" `665 
v L "value" 2 736 "int8" `666 
f G "set_ticks" 2 736 "void(int8 stream,int8 value)" `664 
v L "stream" 2 737 "int8" `665 
v L "value" 2 737 "int16" `669 
f G "set_ticks" 2 737 "void(int8 stream,int16 value)" `667 
v L "stream" 2 738 "int8" `665 
v L "value" 2 738 "int32" `672 
f G "set_ticks" 2 738 "void(int8 stream,int32 value)" `670 
v L "stream" 2 739 "int8" `665 
v L "value" 2 739 "?" `675 
f G "set_ticks" 2 739 "void(int8 stream,? value)" `673  "#use pwm() Prototypes:"
f B "pwm_on" 2 742 "void()" `676 
v L "stream" 2 743 "int8" `678 
f G "pwm_on" 2 743 "void(int8 stream)" `677 
f B "pwm_off" 2 744 "void()" `679 
v L "stream" 2 745 "int8" `681 
f G "pwm_off" 2 745 "void(int8 stream)" `680 
v L "duty" 2 746 "int16" `683 
f B "pwm_set_duty" 2 746 "void(int16 duty)" `682 
v L "stream" 2 747 "int8" `685 
v L "duty" 2 747 "int16" `686 
f G "pwm_set_duty" 2 747 "void(int8 stream,int16 duty)" `684 
v L "percent" 2 748 "int16" `688 
f B "pwm_set_duty_percent" 2 748 "void(int16 percent)" `687 
v L "stream" 2 749 "int8" `690 
v L "percent" 2 749 "int16" `691 
f G "pwm_set_duty_percent" 2 749 "void(int8 stream,int16 percent)" `689 
v L "frequency" 2 750 "int32" `693 
f B "pwm_set_frequency" 2 750 "void(int32 frequency)" `692 
v L "stream" 2 751 "int8" `695 
v L "frequency" 2 751 "int32" `696 
f G "pwm_set_frequency" 2 751 "void(int8 stream,int32 frequency)" `694  "#use capture() Prototypes:"
f B "get_capture_time" 2 754 "int16()" `697 
v L "stream" 2 755 "int8" `699 
f G "get_capture_time" 2 755 "int16(int8 stream)" `698 
f B "get_capture_event" 2 756 "int8()" `700 
v L "stream" 2 757 "int8" `702 
f G "get_capture_event" 2 757 "int8(int8 stream)" `701  "Enviroment Prototypes:"
c L "get_capture_event" 2 5 2 "FUNCTION"
v L "address" 2 766 "int16" `704 
f B "goto_address" 2 766 "void(int16 address)" `703 
v L "label" 2 767 "int16" `706 
f B "label_address" 2 767 "int16(int16 label)" `705  "Program Memory Prototypes:"
v L "address" 2 770 "int16" `708 
v L "dataptr" 2 770 "*int8" `709 
v L "count" 2 770 "int16" `710 
f B "read_program_memory" 2 770 "void(int16 address,*int8 dataptr,int16 count)" `707 
v L "address" 2 771 "int16" `712 
f B "erase_program_memory" 2 771 "void(int16 address)" `711 
v L "address" 2 772 "int16" `714 
v L "dataptr" 2 772 "*int8" `715 
v L "count" 2 772 "int16" `716 
f B "write_program_memory" 2 772 "void(int16 address,*int8 dataptr,int16 count)" `713 
v L "dataptr" 2 773 "*int8" `718 
v L "count" 2 773 "int8" `719 
f B "read_configuration_memory" 2 773 "void(*int8 dataptr,int8 count)" `717 
v L "dataptr" 2 774 "*int8" `721 
v L "count" 2 774 "int8" `722 
f B "write_configuration_memory" 2 774 "void(*int8 dataptr,int8 count)" `720  "INT"
c L "write_configuration_memory" 2 5 4 "FUNCTION"
v L "interrupt" 2 781 "int16" `724 
f B "enable_interrupts" 2 781 "void(int16 interrupt)" `723 
v L "interrupt" 2 782 "int16" `726 
f B "disable_interrupts" 2 782 "void(int16 interrupt)" `725 
v L "interrupt" 2 783 "int16" `728 
f B "clear_interrupt" 2 783 "void(int16 interrupt)" `727 
v L "interrupt" 2 784 "int16" `730 
f B "interrupt_adctive" 2 784 "int8(int16 interrupt)" `729 
v L "source" 2 785 "int8" `732 
v L "edge" 2 785 "int8" `733 
f B "ext_int_edge" 2 785 "void(int8 source,int8 edge)" `731 
v L "address" 2 786 "int16" `735 
f B "jump_to_isr" 2 786 "void(int16 address)" `734  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 788 "0x40"
d G "H_TO_L" 2 789 "0"
d G "INTR_GLOBAL" 2 792 "0x400"
d G "GLOBAL" 2 793 "0x400" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 2 794 "0x100"
d G "INTR_ALTERNATE" 2 795 "0x200"
d G "INTR_LEVEL0" 2 796 "0x500"
d G "INTR_LEVEL1" 2 797 "0x501"
d G "INTR_LEVEL2" 2 798 "0x502"
d G "INTR_LEVEL3" 2 799 "0x503"
d G "INTR_LEVEL4" 2 800 "0x504"
d G "INTR_LEVEL5" 2 801 "0x505"
d G "INTR_LEVEL6" 2 802 "0x506"
d G "INTR_LEVEL7" 2 803 "0x507"
d G "INTR_CN_PIN" 2 805 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 2 807 "1"
d G "INT_ADDRERR" 2 808 "2"
d G "INT_STACKERR" 2 809 "3"
d G "INT_MATHERR" 2 810 "4"
d G "INT_EXT0" 2 811 "6"
d G "INT_IC1" 2 812 "7"
d G "INT_OC1" 2 813 "8"
d G "INT_TIMER1" 2 814 "9"
d G "INT_IC2" 2 815 "70"
d G "INT_OC2" 2 816 "71"
d G "INT_TIMER2" 2 817 "72"
d G "INT_TIMER3" 2 818 "73"
d G "INT_SPI1E" 2 819 "74"
d G "INT_SPI1" 2 820 "75"
d G "INT_RDA" 2 821 "76"
d G "INT_TBE" 2 822 "77"
d G "INT_ADC1" 2 823 "78"
d G "INT_SI2C" 2 824 "81"
d G "INT_MI2C" 2 825 "82"
d G "INT_CNI" 2 826 "84"
d G "INT_EXT1" 2 827 "85"
d G "INT_OC3" 2 828 "90"
d G "INT_OC4" 2 829 "91"
d G "INT_TIMER4" 2 830 "92"
d G "INT_TIMER5" 2 831 "93"
d G "INT_EXT2" 2 832 "94"
d G "INT_RDA2" 2 833 "95"
d G "INT_TBE2" 2 834 "96"
d G "INT_SPI2E" 2 835 "97"
d G "INT_SPI2" 2 836 "98"
d G "INT_IC3" 2 837 "102"
d G "INT_IC4" 2 838 "103"
d G "INT_IC5" 2 839 "104"
d G "INT_OC5" 2 840 "106"
d G "INT_SI2C2" 2 841 "114"
d G "INT_MI2C2" 2 842 "115"
d G "INT_UART1E" 2 843 "130"
d G "INT_UART2E" 2 844 "131"
d G "INT_COMP" 2 845 "152"
d G "INT_PMP" 2 846 "164"
d G "INT_RTC" 2 847 "173"
d G "INT_CRC" 2 848 "174"
d G "INT_LVD" 2 849 "179"
D G "LED" 1 11 "PIN_B0"
D G "DELAY" 1 12 "100"
F G "main" 0 5 "void()" `740  "Example blinking LED program"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_pullup" 1 2
F B "pin_select" 2 4
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_vref" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 1 2
F B "crc_calc" 1 2
F B "crc_calc16" 1 2
F B "setup_pmp" 2 0
F B "setup_psp" 2 0
F B "pmp_address" 1 0
F B "pmp_read" 0 0
F B "pmp_write" 1 0
F B "psp_read" 0 1
F B "psp_write" 1 2
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "pmp_output_full" 0 0
F B "pmp_input_full" 0 0
F B "pmp_overflow" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 1 3
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
