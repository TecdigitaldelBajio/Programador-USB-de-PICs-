C L "main" 0 11 4 "FUNCTION"
D G "__PCM__" 0 39 ""5.008""
D G "__DEVICE__" 0 39 "1824"
D G "__DATE__" 0 39 ""16-oct.-16""
D G "__TIME__" 0 39 ""11:55:05"" "Standard Header file for the PIC16F1824 device ////////////////"
c L "set_tris_a" 2 5 15 "FUNCTION"
v L "value" 2 30 "int8" `54 
f B "set_tris_a" 2 30 "void(int8 value)" `53 
v L "value" 2 31 "int8" `56 
f B "set_tris_c" 2 31 "void(int8 value)" `55 
f B "get_tris_a" 2 32 "int8()" `57 
f B "get_tris_c" 2 33 "int8()" `58 
v L "value" 2 34 "int8" `60 
f B "output_a" 2 34 "void(int8 value)" `59 
v L "value" 2 35 "int8" `62 
f B "output_c" 2 35 "void(int8 value)" `61 
f B "input_a" 2 36 "int8()" `63 
f B "input_c" 2 37 "int8()" `64 
f B "input_change_a" 2 38 "int8()" `65 
f B "input_change_c" 2 39 "int8()" `66 
v L "pin" 2 40 "int16" `68 
f B "input" 2 40 "int8(int16 pin)" `67 
v L "pin" 2 41 "int16" `70 
f B "input_state" 2 41 "int8(int16 pin)" `69 
v L "pin" 2 42 "int16" `72 
f B "output_low" 2 42 "void(int16 pin)" `71 
v L "pin" 2 43 "int16" `74 
f B "output_high" 2 43 "void(int16 pin)" `73 
v L "pin" 2 44 "int16" `76 
f B "output_toggle" 2 44 "void(int16 pin)" `75 
v L "pin" 2 45 "int16" `78 
v L "level" 2 45 "int8" `79 
f B "output_bit" 2 45 "void(int16 pin,int8 level)" `77 
v L "pin" 2 46 "int16" `81 
f B "output_float" 2 46 "void(int16 pin)" `80 
v L "pin" 2 47 "int16" `83 
f B "output_drive" 2 47 "void(int16 pin)" `82  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 51 "96"
d G "PIN_A1" 2 52 "97"
d G "PIN_A2" 2 53 "98"
d G "PIN_A3" 2 54 "99"
d G "PIN_A4" 2 55 "100"
d G "PIN_A5" 2 56 "101"
d G "PIN_C0" 2 58 "112"
d G "PIN_C1" 2 59 "113"
d G "PIN_C2" 2 60 "114"
d G "PIN_C3" 2 61 "115"
d G "PIN_C4" 2 62 "116"
d G "PIN_C5" 2 63 "117"
d G "FALSE" 2 66 "0"
d G "TRUE" 2 67 "1"
d G "BYTE" 2 69 "int8"
d G "BOOLEAN" 2 70 "int1"
d G "getc" 2 72 "getch"
d G "fgetc" 2 73 "getch"
d G "getchar" 2 74 "getch"
d G "putc" 2 75 "putchar"
d G "fputc" 2 76 "putchar"
d G "fgets" 2 77 "gets"
d G "fputs" 2 78 "puts"
c L "output_drive" 2 5 3 "FUNCTION"
f B "restart_cause" 2 83 "int8()" `84 
f B "reset_cpu" 2 84 "void()" `85 
f B "sleep" 2 85 "void()" `86 
v L "type" 2 86 "int8" `88 
f G "sleep" 2 86 "void(int8 type)" `87  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 88 "0x3C"
d G "BROWNOUT_RESTART" 2 89 "0x3E"
d G "MCLR_FROM_SLEEP" 2 90 "0x27"
d G "WDT_TIMEOUT" 2 91 "0x1F"
d G "WDT_FROM_SLEEP" 2 92 "0x0F"
d G "INTERRUPT_FROM_SLEEP" 2 93 "0x2F"
d G "MCLR_FROM_RUN" 2 94 "0x37"
d G "RESET_INSTRUCTION" 2 95 "0x3B"
d G "STACK_OVERFLOW" 2 96 "0xBF"
d G "STACK_UNDERFLOW" 2 97 "0x7F"
c L "sleep" 2 5 5 "FUNCTION"
v L "mode" 2 104 "int8" `90 
f B "setup_timer_0" 2 104 "void(int8 mode)" `89 
v L "value" 2 105 "int8" `92 
f B "set_timer0" 2 105 "void(int8 value)" `91 
f B "get_timer0" 2 106 "int8()" `93 
v L "mode" 2 107 "int8" `95 
v L "prescaler" 2 107 "int8" `96 
f B "setup_counters" 2 107 "void(int8 mode,int8 prescaler)" `94 
v L "value" 2 108 "int8" `98 
f B "set_rtcc" 2 108 "void(int8 value)" `97 
f B "get_rtcc" 2 109 "int8()" `99  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 111 "0"
d G "T0_EXT_L_TO_H" 2 112 "32"
d G "T0_EXT_H_TO_L" 2 113 "48"
d G "T0_DIV_1" 2 115 "8"
d G "T0_DIV_2" 2 116 "0"
d G "T0_DIV_4" 2 117 "1"
d G "T0_DIV_8" 2 118 "2"
d G "T0_DIV_16" 2 119 "3"
d G "T0_DIV_32" 2 120 "4"
d G "T0_DIV_64" 2 121 "5"
d G "T0_DIV_128" 2 122 "6"
d G "T0_DIV_256" 2 123 "7"
d G "T0_8_BIT" 2 126 "0"
d G "RTCC_INTERNAL" 2 128 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 129 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 130 "48"
d G "RTCC_DIV_1" 2 131 "8"
d G "RTCC_DIV_2" 2 132 "0"
d G "RTCC_DIV_4" 2 133 "1"
d G "RTCC_DIV_8" 2 134 "2"
d G "RTCC_DIV_16" 2 135 "3"
d G "RTCC_DIV_32" 2 136 "4"
d G "RTCC_DIV_64" 2 137 "5"
d G "RTCC_DIV_128" 2 138 "6"
d G "RTCC_DIV_256" 2 139 "7"
d G "RTCC_8_BIT" 2 140 "0"
c L "get_rtcc" 2 5 7 "FUNCTION"
v L "mode" 2 150 "int16" `101 
f B "setup_wdt" 2 150 "void(int16 mode)" `100 
f B "restart_wdt" 2 151 "void()" `102  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 153 "0x1000"
d G "WDT_OFF" 2 154 "0x2000"
d G "WDT_1MS" 2 156 "0x100"
d G "WDT_2MS" 2 157 "0x101"
d G "WDT_4MS" 2 158 "0x102"
d G "WDT_8MS" 2 159 "0x103"
d G "WDT_16MS" 2 160 "0x104"
d G "WDT_32MS" 2 161 "0x105"
d G "WDT_64MS" 2 162 "0x106"
d G "WDT_128MS" 2 163 "0x107"
d G "WDT_256MS" 2 164 "0x108"
d G "WDT_512MS" 2 165 "0x109"
d G "WDT_1S" 2 166 "0x10A"
d G "WDT_2S" 2 167 "0x10B"
d G "WDT_4S" 2 168 "0x10C"
d G "WDT_8S" 2 169 "0x10D"
d G "WDT_16S" 2 170 "0x10E"
d G "WDT_32S" 2 171 "0x10F"
d G "WDT_64S" 2 172 "0x110"
d G "WDT_128S" 2 173 "0x111"
d G "WDT_256S" 2 174 "0x112"
c L "restart_wdt" 2 5 3 "FUNCTION"
v L "mode" 2 179 "int16" `104 
f B "setup_timer_1" 2 179 "void(int16 mode)" `103 
f B "get_timer1" 2 180 "int16()" `105 
v L "value" 2 181 "int16" `107 
f B "set_timer1" 2 181 "void(int16 value)" `106  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 184 "0"
d G "T1_CAPSENSE" 2 185 "0xC5"
d G "T1_EXTERNAL" 2 186 "0x85"
d G "T1_EXTERNAL_SYNC" 2 187 "0x81"
d G "T1_FOSC" 2 188 "0x45"
d G "T1_INTERNAL" 2 189 "0x05"
d G "T1_ENABLE_T1OSC" 2 191 "0x08"
d G "T1_DIV_BY_1" 2 193 "0x00"
d G "T1_DIV_BY_2" 2 194 "0x10"
d G "T1_DIV_BY_4" 2 195 "0x20"
d G "T1_DIV_BY_8" 2 196 "0x30"
d G "T1_GATE" 2 198 "0x8000"
d G "T1_GATE_INVERTED" 2 199 "0xC000"
d G "T1_GATE_TOGGLE" 2 200 "0xA000"
d G "T1_GATE_SINGLE" 2 201 "0x9000"
d G "T1_GATE_TIMER0" 2 202 "0x8100"
d G "T1_GATE_COMP1" 2 203 "0x8200"
d G "T1_GATE_COMP2" 2 204 "0x8300"
d G "T1_GATE_A4" 2 206 "0"
d G "T1_GATE_A3" 2 207 "0x10000"
c L "set_timer1" 2 5 3 "FUNCTION"
v L "mode" 2 212 "int8" `109 
v L "period" 2 212 "int8" `110 
v L "postscale" 2 212 "int8" `111 
f B "setup_timer_2" 2 212 "void(int8 mode,int8 period,int8 postscale)" `108 
f B "get_timer2" 2 213 "int8()" `112 
v L "value" 2 214 "int8" `114 
f B "set_timer2" 2 214 "void(int8 value)" `113  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 216 "0"
d G "T2_DIV_BY_1" 2 217 "4"
d G "T2_DIV_BY_4" 2 218 "5"
d G "T2_DIV_BY_16" 2 219 "6"
d G "T2_DIV_BY_64" 2 220 "7"
c L "set_timer2" 2 5 3 "FUNCTION"
v L "mode" 2 225 "int16" `116 
v L "period" 2 225 "int8" `117 
v L "postscaler" 2 225 "int8" `118 
f B "setup_timer_4" 2 225 "void(int16 mode,int8 period,int8 postscaler)" `115 
f B "get_timer4" 2 226 "int8()" `119 
v L "value" 2 227 "int8" `121 
f B "set_timre4" 2 227 "void(int8 value)" `120  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 229 "0"
d G "T4_DIV_BY_1" 2 230 "4"
d G "T4_DIV_BY_4" 2 231 "5"
d G "T4_DIV_BY_16" 2 232 "6"
d G "T4_DIV_BY_64" 2 233 "7"
c L "set_timre4" 2 5 3 "FUNCTION"
v L "mode" 2 238 "int8" `123 
v L "period" 2 238 "int8" `124 
v L "postscaler" 2 238 "int8" `125 
f B "steup_timer_6" 2 238 "void(int8 mode,int8 period,int8 postscaler)" `122 
f B "get_timer6" 2 239 "int8()" `126 
v L "value" 2 240 "int8" `128 
f B "set_timer6" 2 240 "void(int8 value)" `127  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 243 "0"
d G "T6_DIV_BY_1" 2 244 "4"
d G "T6_DIV_BY_4" 2 245 "5"
d G "T6_DIV_BY_16" 2 246 "6"
d G "T6_DIV_BY_64" 2 247 "7"
c L "set_timer6" 2 5 4 "FUNCTION"
v L "mode" 2 253 "int32" `130 
f B "setup_ccp1" 2 253 "void(int32 mode)" `129 
v L "mode" 2 254 "int32" `132 
v L "pwm" 2 254 "int8" `133 
f G "setup_ccp1" 2 254 "void(int32 mode,int8 pwm)" `131 
v L "value" 2 255 "int16" `135 
f B "set_pwm1_duty" 2 255 "void(int16 value)" `134  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 257 "0"
d G "CCP_CAPTURE_FE" 2 258 "4"
d G "CCP_CAPTURE_RE" 2 259 "5"
d G "CCP_CAPTURE_DIV_4" 2 260 "6"
d G "CCP_CAPTURE_DIV_16" 2 261 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 262 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 263 "9"
d G "CCP_COMPARE_INT" 2 264 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 265 "0xB"
d G "CCP_PWM" 2 266 "0xC"
d G "CCP_PWM_PLUS_1" 2 267 "0x1c"
d G "CCP_PWM_PLUS_2" 2 268 "0x2c"
d G "CCP_PWM_PLUS_3" 2 269 "0x3c"
d G "CCP_PWM_H_H" 2 274 "0x0c"
d G "CCP_PWM_H_L" 2 275 "0x0d"
d G "CCP_PWM_L_H" 2 276 "0x0e"
d G "CCP_PWM_L_L" 2 277 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 279 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 280 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 281 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 283 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 284 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 285 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 286 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 287 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 288 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 289 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 291 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 292 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 293 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 295 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 296 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 297 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 299 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 301 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 302 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 303 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 304 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 305 "0x10000000"
d G "CCP_TIMER2" 2 308 "0x0000"
d G "CCP_TIMER4" 2 309 "0x1000"
d G "CCP_TIMER6" 2 310 "0x2000"
d G "CCP_P1C_C3" 2 312 "0x000"
d G "CCP_P1C_C1" 2 313 "0x100"
d G "CCP_P1D_C2" 2 314 "0x000"
d G "CCP_P1D_C0" 2 315 "0x200"
d G "CCP2_C3" 2 316 "0x000"
d G "CCP2_A5" 2 317 "0x100"
d G "CCP_P2B_C2" 2 318 "0x000"
d G "CCP_P2B_A4" 2 319 "0x200"
c L "set_pwm1_duty" 2 5 1 "FUNCTION"
v L "mode" 2 323 "int32" `140 
f B "setup_ccp2" 2 323 "void(int32 mode)" `139 
v L "mode" 2 324 "int32" `142 
v L "pwm" 2 324 "int8" `143 
f G "setup_ccp2" 2 324 "void(int32 mode,int8 pwm)" `141 
v L "value" 2 325 "int16" `145 
f B "set_pwm2_duty" 2 325 "void(int16 value)" `144 
c L "set_pwm2_duty" 2 5 1 "FUNCTION"
v L "mode" 2 331 "int32" `150 
f B "setup_ccp3" 2 331 "void(int32 mode)" `149 
v L "mode" 2 332 "int32" `152 
v L "pwm" 2 332 "int8" `153 
f G "setup_ccp3" 2 332 "void(int32 mode,int8 pwm)" `151 
v L "value" 2 333 "int16" `155 
f B "set_pwm3_duty" 2 333 "void(int16 value)" `154 
c L "set_pwm3_duty" 2 5 1 "FUNCTION"
v L "mode" 2 339 "int32" `160 
f B "setup_ccp4" 2 339 "void(int32 mode)" `159 
v L "mode" 2 340 "int32" `162 
v L "pwm" 2 340 "int8" `163 
f G "setup_ccp4" 2 340 "void(int32 mode,int8 pwm)" `161 
v L "value" 2 341 "int16" `165 
f B "set_pwm4_duty" 2 341 "void(int16 value)" `164 
c L "set_pwm4_duty" 2 5 3 "FUNCTION"
v L "mode" 2 348 "int32" `170 
f B "setup_spi" 2 348 "void(int32 mode)" `169 
v L "value" 2 349 "int8" `172 
f B "spi_write" 2 349 "void(int8 value)" `171 
f B "spi_read" 2 350 "int8()" `173 
v L "value" 2 351 "int8" `175 
f G "spi_read" 2 351 "int8(int8 value)" `174 
f B "spi_data_in" 2 352 "int8()" `176  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 354 "0x00"
d G "SPI_MASTER" 2 355 "0x20"
d G "SPI_SLAVE" 2 356 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 357 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 358 "0x00"
d G "SPI_CLK_DIV_4" 2 359 "0x00"
d G "SPI_CLK_DIV_16" 2 360 "0x01"
d G "SPI_CLK_DIV_64" 2 361 "0x02"
d G "SPI_CLK_T2" 2 362 "0x03"
d G "SPI_SS_DISABLED" 2 363 "0x01"
d G "SPI_DO_C2" 2 365 "0x00000"
d G "SPI_DO_A4" 2 366 "0x10000"
d G "SPI_SS_C3" 2 367 "0x00000"
d G "SPI_SS_A3" 2 368 "0x20000"
d G "SPI_XMIT_L_TO_H" 2 370 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 371 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 373 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 374 "0x8000"
d G "SPI_L_TO_H" 2 377 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 378 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 5 2 "FUNCTION"
v L "baud" 2 382 "int32" `178 
f B "setup_uart" 2 382 "void(int32 baud)" `177 
v L "baud" 2 383 "int32" `180 
v L "stream" 2 383 "int8" `181 
f G "setup_uart" 2 383 "void(int32 baud,int8 stream)" `179 
v L "baud" 2 384 "int32" `183 
v L "stream" 2 384 "int8" `184 
v L "clock" 2 384 "int32" `185 
f G "setup_uart" 2 384 "void(int32 baud,int8 stream,int32 clock)" `182 
v L "baud" 2 385 "int32" `187 
f B "set_uart_speed" 2 385 "void(int32 baud)" `186 
v L "baud" 2 386 "int32" `189 
v L "stream" 2 386 "int8" `190 
f G "set_uart_speed" 2 386 "void(int32 baud,int8 stream)" `188 
v L "baud" 2 387 "int32" `192 
v L "stream" 2 387 "int8" `193 
v L "clock" 2 387 "int32" `194 
f G "set_uart_speed" 2 387 "void(int32 baud,int8 stream,int32 clock)" `191  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 391 "2"
d G "UART_DATA" 2 392 "4"
d G "UART_AUTODETECT" 2 393 "8"
d G "UART_AUTODETECT_NOWAIT" 2 394 "9"
d G "UART_WAKEUP_ON_RDA" 2 395 "10"
d G "UART_SEND_BREAK" 2 396 "13"
c L "set_uart_speed" 2 5 3 "FUNCTION"
v L "mode" 2 400 "int32" `196 
f B "setup_comparator" 2 400 "void(int32 mode)" `195  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 403 "0x00"
d G "CP1_A1_A0" 2 406 "0x8000"
d G "CP1_C1_A0" 2 407 "0x8001"
d G "CP1_C2_A0" 2 408 "0x8002"
d G "CP1_C3_A0" 2 409 "0x8003"
d G "CP1_A1_DAC" 2 410 "0x8010"
d G "CP1_C1_DAC" 2 411 "0x8011"
d G "CP1_C2_DAC" 2 412 "0x8012"
d G "CP1_C3_DAC" 2 413 "0x8013"
d G "CP1_A1_FVR" 2 414 "0x8020"
d G "CP1_C1_FVR" 2 415 "0x8021"
d G "CP1_C2_FVR" 2 416 "0x8022"
d G "CP1_C3_FVR" 2 417 "0x8023"
d G "CP1_A1_VSS" 2 418 "0x8030"
d G "CP1_C1_VSS" 2 419 "0x8031"
d G "CP1_C2_VSS" 2 420 "0x8032"
d G "CP1_C3_VSS" 2 421 "0x8033"
d G "CP1_INT_L2H" 2 423 "0x0080"
d G "CP1_INT_H2L" 2 424 "0x0040"
d G "CP1_OUT_ON_A2" 2 425 "0x2000"
d G "CP1_INVERT" 2 426 "0x1000"
d G "CP1_FAST" 2 427 "0x0400"
d G "CP1_HYST" 2 428 "0x0200"
d G "CP1_SYNC" 2 429 "0x0100"
d G "CP2_A1_C0" 2 432 "0x80000000"
d G "CP2_C1_C0" 2 433 "0x80010000"
d G "CP2_C2_C0" 2 434 "0x80020000"
d G "CP2_C3_C0" 2 435 "0x80030000"
d G "CP2_A1_DAC" 2 436 "0x80100000"
d G "CP2_C1_DAC" 2 437 "0x80110000"
d G "CP2_C2_DAC" 2 438 "0x80120000"
d G "CP2_C3_DAC" 2 439 "0x80130000"
d G "CP2_A1_FVR" 2 440 "0x80200000"
d G "CP2_C1_FVR" 2 441 "0x80210000"
d G "CP2_C2_FVR" 2 442 "0x80220000"
d G "CP2_C3_FVR" 2 443 "0x80230000"
d G "CP2_A1_VSS" 2 444 "0x80300000"
d G "CP2_C1_VSS" 2 445 "0x80310000"
d G "CP2_C2_VSS" 2 446 "0x80320000"
d G "CP2_C3_VSS" 2 447 "0x80330000"
d G "CP2_INT_L2H" 2 449 "0x00800000"
d G "CP2_INT_H2L" 2 450 "0x00400000"
d G "CP2_OUT_ON_C4" 2 451 "0x20000000"
d G "CP2_INVERT" 2 452 "0x10000000"
d G "CP2_FAST" 2 453 "0x04000000"
d G "CP2_HYST" 2 454 "0x02000000"
d G "CP2_SYNC" 2 455 "0x01000000"
c L "setup_comparator" 2 5 2 "FUNCTION"
v L "mode" 2 462 "int8" `200 
f B "setup_vref" 2 462 "void(int8 mode)" `199  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 464 "0"
d G "VREF_ON" 2 465 "0x80"
d G "VREF_ADC_OFF" 2 467 "0"
d G "VREF_ADC_1v024" 2 468 "0x01"
d G "VREF_ADC_2v048" 2 469 "0x02"
d G "VREF_ADC_4v096" 2 470 "0x03"
d G "VREF_COMP_DAC_OFF" 2 472 "0"
d G "VREF_COMP_DAC_1v024" 2 473 "0x04"
d G "VREF_COMP_DAC_2v048" 2 474 "0x08"
d G "VREF_COMP_DAC_4v096" 2 475 "0x0C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 477 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 478 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 479 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 480 "0x10"
c L "setup_vref" 2 5 3 "FUNCTION"
v L "mode" 2 485 "int8" `202 
f B "setup_dac" 2 485 "void(int8 mode)" `201 
v L "value" 2 486 "int8" `204 
f B "dac_write" 2 486 "void(int8 value)" `203  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 488 "0"
d G "DAC_VSS_VDD" 2 489 "0x80"
d G "DAC_VREF_VDD" 2 490 "0x81"
d G "DAC_VSS_VREF" 2 491 "0x84"
d G "DAC_VREF_VREF" 2 492 "0x85"
d G "DAC_VSS_FVR" 2 493 "0x88"
d G "DAC_FVR_VREF" 2 494 "0x89"
d G "DAC_OUTPUT" 2 496 "0x20"
d G "DAC_LVP_POS" 2 497 "0x40"
d G "DAC_LVP_NEG" 2 498 "0"
c L "dac_write" 2 5 2 "FUNCTION"
v L "mode" 2 503 "int8" `206 
f B "setup_oscillator" 2 503 "void(int8 mode)" `205  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 506 "0"
d G "OSC_31250" 2 507 " (2*8)"
d G "OSC_62KHZ" 2 508 " (4*8)"
d G "OSC_125KHZ" 2 509 " (5*8)"
d G "OSC_250KHZ" 2 510 " (6*8)"
d G "OSC_500KHZ" 2 511 " (7*8)"
d G "OSC_1MHZ" 2 512 " (11*8)"
d G "OSC_2MHZ" 2 513 " (12*8)"
d G "OSC_4MHZ" 2 514 " (13*8)"
d G "OSC_8MHZ" 2 515 " (14*8)"
d G "OSC_16MHZ" 2 516 " (15*8)"
d G "OSC_TIMER1" 2 518 "1"
d G "OSC_INTRC" 2 519 "2"
d G "OSC_NORMAL" 2 520 "0"
d G "OSC_PLL_ON" 2 522 "0x80"
d G "OSC_PLL_OFF" 2 523 "0"
c L "setup_oscillator" 2 5 4 "FUNCTION"
v L "mode" 2 530 "int16" `208 
f B "setup_adc" 2 530 "void(int16 mode)" `207 
f B "read_adc" 2 531 "int8()" `209 
v L "mode" 2 532 "int8" `211 
f G "read_adc" 2 532 "int8(int8 mode)" `210 
f G "read_adc" 2 533 "int16()" `212 
v L "mode" 2 534 "int8" `214 
f G "read_adc" 2 534 "int16(int8 mode)" `213 
f B "adc_done" 2 535 "int8()" `215  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 537 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 538 "0x100"
d G "ADC_CLOCK_DIV_4" 2 539 "0x40"
d G "ADC_CLOCK_DIV_8" 2 540 "0x10"
d G "ADC_CLOCK_DIV_32" 2 541 "0x20"
d G "ADC_CLOCK_DIV_16" 2 542 "0x50"
d G "ADC_CLOCK_DIV_64" 2 543 "0x60"
d G "ADC_CLOCK_INTERNAL" 2 544 "0x30" "Internal 2-6us"
c L "adc_done" 2 5 1 "FUNCTION"
v L "pins" 2 547 "int32" `217 
f B "setup_adc_ports" 2 547 "void(int32 pins)" `216 
v L "pins" 2 548 "int32" `219 
v L "reference" 2 548 "int32" `220 
f G "setup_adc_ports" 2 548 "void(int32 pins,int32 reference)" `218 
v L "channel" 2 549 "int8" `222 
f B "set_adc_channel" 2 549 "void(int8 channel)" `221  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 553 "0x00010000" "| A0"
d G "sAN1" 2 554 "0x00020000" "| A1"
d G "sAN2" 2 555 "0x00040000" "| A2"
d G "sAN3" 2 556 "0x00100000" "| A4"
d G "sAN4" 2 557 "0x00000100" "| C0"
d G "sAN5" 2 558 "0x00000200" "| C1"
d G "sAN6" 2 559 "0x00000400" "| C2"
d G "sAN7" 2 560 "0x00000800" "| C3"
d G "NO_ANALOGS" 2 561 "0" "None"
d G "ALL_ANALOG" 2 562 "0x00170F00" "A0 A1 A2 A4 C0 C1 C2 C3"
d G "VSS_VDD" 2 565 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 566 "0x02000000" "| Range 0-VrefH"
d G "VSS_FVR" 2 567 "0x03000000" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 2 568 "0x04000000" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 569 "0x06000000" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 570 "0x07000000" "| Range VrefL-Fixed Voltage Reference"
d G "TEMPERATURE_INDICATOR" 2 574 "0x1D"
d G "DAC_CHANNEL" 2 575 "0x1E"
d G "FVR_CHANNEL" 2 576 "0x1F"
d G "ADC_START_AND_READ" 2 579 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 580 "1"
d G "ADC_READ_ONLY" 2 581 "6"
c L "set_adc_channel" 2 5 3 "FUNCTION"
v L "x" 2 587 "sint8" `224 
f B "abs" 2 587 "sint8(sint8 x)" `223 
v L "x" 2 588 "sint16" `226 
f G "abs" 2 588 "sint16(sint16 x)" `225 
v L "x" 2 589 "sint32" `228 
f G "abs" 2 589 "sint32(sint32 x)" `227 
v L "x" 2 590 "float" `230 
f G "abs" 2 590 "float(float x)" `229 
v L "??65535" 2 591 "int8" `232 
v L "??65535" 2 591 "int8" `233 
f B "_mul" 2 591 "int16(int8 ,int8 )" `231 
v L "??65535" 2 592 "sint8" `232 
v L "??65535" 2 592 "sint8" `236 
f G "_mul" 2 592 "sint16(sint8 ,sint8 )" `234 
v L "??65535" 2 593 "int16" `232 
v L "??65535" 2 593 "int16" `239 
f G "_mul" 2 593 "int32(int16 ,int16 )" `237 
v L "??65535" 2 594 "sint16" `232 
v L "??65535" 2 594 "sint16" `242 
f G "_mul" 2 594 "sint32(sint16 ,sint16 )" `240  "Memory Manipulation Prototypes:"
v L "bank" 2 597 "int8" `244 
v L "offset" 2 597 "int8" `245 
f B "read_bank" 2 597 "int8(int8 bank,int8 offset)" `243 
v L "bank" 2 598 "int8" `247 
v L "offset" 2 598 "int8" `248 
v L "value" 2 598 "int8" `249 
f B "write_bank" 2 598 "void(int8 bank,int8 offset,int8 value)" `246 
v L "dest" 2 599 "*int8" `251 
v L "src" 2 599 "*int8" `252 
f B "strcpy" 2 599 "void(*int8 dest,*int8 src)" `250 
v L "dest" 2 600 "*int8" `254 
v L "src" 2 600 "*int8" `255 
f B "strcopy" 2 600 "void(*int8 dest,*int8 src)" `253 
v L "destination" 2 601 "*int8" `257 
v L "value" 2 601 "int8" `258 
v L "num" 2 601 "int16" `259 
f B "memset" 2 601 "void(*int8 destination,int8 value,int16 num)" `256 
v L "destination" 2 602 "*int8" `261 
v L "source" 2 602 "*int8" `262 
v L "num" 2 602 "int16" `263 
f B "memcpy" 2 602 "void(*int8 destination,*int8 source,int16 num)" `260  "String Prototypes:"
v L "cvalue" 2 605 "int8" `265 
f B "toupper" 2 605 "int8(int8 cvalue)" `264 
v L "cvalue" 2 606 "int8" `267 
f B "tolower" 2 606 "int8(int8 cvalue)" `266 
v L "string" 2 607 "*int8" `269 
v L "cstring" 2 607 "*int8" `270 
f B "sprintf" 2 607 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `268  "Data Manipulators Prototypes:"
v L "address" 2 610 "*int8" `273 
v L "bytes" 2 610 "int8" `274 
v L "value" 2 610 "int8" `275 
f B "shift_left" 2 610 "int8(*int8 address,int8 bytes,int8 value)" `272 
v L "address" 2 611 "*int8" `277 
v L "bytes" 2 611 "int8" `278 
v L "value" 2 611 "int8" `279 
f B "shift_right" 2 611 "int8(*int8 address,int8 bytes,int8 value)" `276 
v L "address" 2 612 "*int8" `281 
v L "bytes" 2 612 "int8" `282 
f B "rotate_left" 2 612 "void(*int8 address,int8 bytes)" `280 
v L "address" 2 613 "*int8" `284 
v L "bytes" 2 613 "int8" `285 
f B "rotate_right" 2 613 "void(*int8 address,int8 bytes)" `283 
v L "value" 2 614 "int8" `287 
f B "swap" 2 614 "void(int8 value)" `286 
v L "var" 2 615 "int16" `289 
v L "offset" 2 615 "int8" `290 
f B "make8" 2 615 "int8(int16 var,int8 offset)" `288 
v L "var" 2 616 "int32" `289 
v L "offset" 2 616 "int8" `293 
f G "make8" 2 616 "int8(int32 var,int8 offset)" `291 
v L "varhigh" 2 617 "int8" `295 
v L "varlow" 2 617 "int8" `296 
f B "make16" 2 617 "int16(int8 varhigh,int8 varlow)" `294 
v L "var1" 2 618 "int16" `298 
f B "make32" 2 618 "int32(int16 var1)" `297 
v L "var1" 2 619 "int16" `300 
v L "var2" 2 619 "int16" `301 
f G "make32" 2 619 "int32(int16 var1,int16 var2)" `299 
v L "var1" 2 620 "int16" `300 
v L "var2" 2 620 "int8" `304 
f G "make32" 2 620 "int32(int16 var1,int8 var2)" `302 
v L "var1" 2 621 "int16" `306 
v L "var2" 2 621 "int8" `307 
v L "var3" 2 621 "int8" `308 
f G "make32" 2 621 "int32(int16 var1,int8 var2,int8 var3)" `305 
v L "var1" 2 622 "int8" `310 
f G "make32" 2 622 "int32(int8 var1)" `309 
v L "var1" 2 623 "int8" `300 
v L "var2" 2 623 "int8" `313 
f G "make32" 2 623 "int32(int8 var1,int8 var2)" `311 
v L "var1" 2 624 "int8" `306 
v L "var2" 2 624 "int8" `307 
v L "var3" 2 624 "int8" `317 
f G "make32" 2 624 "int32(int8 var1,int8 var2,int8 var3)" `314 
v L "var1" 2 625 "int8" `319 
v L "var2" 2 625 "int8" `320 
v L "var3" 2 625 "int8" `321 
v L "var4" 2 625 "int8" `322 
f G "make32" 2 625 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `318 
v L "var1" 2 626 "int8" `300 
v L "var2" 2 626 "int16" `325 
f G "make32" 2 626 "int32(int8 var1,int16 var2)" `323 
v L "var1" 2 627 "int8" `306 
v L "var2" 2 627 "int16" `307 
v L "var3" 2 627 "int8" `329 
f G "make32" 2 627 "int32(int8 var1,int16 var2,int8 var3)" `326 
v L "var1" 2 628 "int8" `306 
v L "var2" 2 628 "int8" `307 
v L "var3" 2 628 "int16" `333 
f G "make32" 2 628 "int32(int8 var1,int8 var2,int16 var3)" `330 
v L "var" 2 629 "int8" `335 
v L "bit" 2 629 "int8" `336 
f B "bit_set" 2 629 "void(int8 var,int8 bit)" `334 
v L "var" 2 630 "int16" `335 
v L "bit" 2 630 "int8" `339 
f G "bit_set" 2 630 "void(int16 var,int8 bit)" `337 
v L "var" 2 631 "int32" `335 
v L "bit" 2 631 "int8" `342 
f G "bit_set" 2 631 "void(int32 var,int8 bit)" `340 
v L "var" 2 632 "int8" `344 
v L "bit" 2 632 "int8" `345 
f B "bit_clear" 2 632 "void(int8 var,int8 bit)" `343 
v L "var" 2 633 "int16" `344 
v L "bit" 2 633 "int8" `348 
f G "bit_clear" 2 633 "void(int16 var,int8 bit)" `346 
v L "var" 2 634 "int32" `344 
v L "bit" 2 634 "int8" `351 
f G "bit_clear" 2 634 "void(int32 var,int8 bit)" `349 
v L "var" 2 635 "int8" `353 
v L "bit" 2 635 "int8" `354 
f B "bit_test" 2 635 "int8(int8 var,int8 bit)" `352 
v L "var" 2 636 "int16" `353 
v L "bit" 2 636 "int8" `357 
f G "bit_test" 2 636 "int8(int16 var,int8 bit)" `355 
v L "var" 2 637 "int32" `353 
v L "bit" 2 637 "int8" `360 
f G "bit_test" 2 637 "int8(int32 var,int8 bit)" `358  "#use delay() Prototypes:"
v L "count" 2 640 "int8" `362 
f B "delay_cycles" 2 640 "void(int8 count)" `361 
v L "time" 2 641 "int16" `364 
f B "delay_ms" 2 641 "void(int16 time)" `363 
v L "time" 2 642 "int16" `366 
f B "delay_us" 2 642 "void(int16 time)" `365  "#use rs232() Prototypes:"
v L "cdata" 2 645 "int8" `368 
f B "putchar" 2 645 "void(int8 cdata)" `367 
v L "cdata" 2 646 "int8" `370 
v L "stream" 2 646 "int8" `371 
f G "putchar" 2 646 "void(int8 cdata,int8 stream)" `369 
v L "string" 2 647 "*int8" `373 
f B "puts" 2 647 "void(*int8 string)" `372 
v L "string" 2 648 "*int8" `375 
v L "stream" 2 648 "int8" `376 
f G "puts" 2 648 "void(*int8 string,int8 stream)" `374 
f B "getch" 2 649 "int8()" `377 
v L "stream" 2 650 "int8" `379 
f G "getch" 2 650 "int8(int8 stream)" `378 
v L "string" 2 651 "*int8" `381 
f B "gets" 2 651 "void(*int8 string)" `380 
v L "string" 2 652 "*int8" `383 
v L "stream" 2 652 "int8" `384 
f G "gets" 2 652 "void(*int8 string,int8 stream)" `382 
f B "kbhit" 2 653 "int8()" `385 
v L "stream" 2 654 "int8" `387 
f G "kbhit" 2 654 "int8(int8 stream)" `386 
v L "string" 2 655 "*int8" `389 
f B "printf" 2 655 "void(*int8 string,*int8 _VA_LIST)" `388 
v L "stream" 2 656 "int8" `392 
v L "string" 2 656 "*int8" `393 
f B "fprintf" 2 656 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `391 
f B "putc_send" 2 657 "void()" `395 
v L "stream" 2 658 "int8" `397 
f B "fputc_send" 2 658 "void(int8 stream)" `396 
f B "rcv_buffer_full" 2 659 "int8()" `398 
v L "stream" 2 660 "int8" `400 
f G "rcv_buffer_full" 2 660 "int8(int8 stream)" `399 
f B "rcv_buffer_bytes" 2 661 "int16()" `401 
v L "stream" 2 662 "int8" `403 
f G "rcv_buffer_bytes" 2 662 "int16(int8 stream)" `402 
f B "tx_buffer_full" 2 663 "int8()" `404 
v L "stream" 2 664 "int8" `406 
f G "tx_buffer_full" 2 664 "int8(int8 stream)" `405 
f B "tx_buffer_bytes" 2 665 "int16()" `407 
v L "stream" 2 666 "int8" `409 
f G "tx_buffer_bytes" 2 666 "int16(int8 stream)" `408  "#use i2c() Prototypes:"
f B "i2c_read" 2 669 "int8()" `410 
v L "stream" 2 670 "int8" `412 
f G "i2c_read" 2 670 "int8(int8 stream)" `411 
v L "stream" 2 671 "int8" `414 
v L "ack" 2 671 "int8" `415 
f G "i2c_read" 2 671 "int8(int8 stream,int8 ack)" `413 
v L "data" 2 672 "int8" `417 
f B "i2c_write" 2 672 "int8(int8 data)" `416 
v L "stream" 2 673 "int8" `419 
v L "data" 2 673 "int8" `420 
f G "i2c_write" 2 673 "int8(int8 stream,int8 data)" `418 
f B "i2c_start" 2 674 "void()" `421 
v L "stream" 2 675 "int8" `423 
f G "i2c_start" 2 675 "void(int8 stream)" `422 
v L "stream" 2 676 "int8" `425 
v L "restart" 2 676 "int8" `426 
f G "i2c_start" 2 676 "void(int8 stream,int8 restart)" `424 
f B "i2c_stop" 2 677 "void()" `427 
v L "stream" 2 678 "int8" `429 
f G "i2c_stop" 2 678 "void(int8 stream)" `428 
f B "i2c_isr_state" 2 679 "int8()" `430 
v L "addr" 2 680 "int8" `432 
f B "i2c_slaveaddr" 2 680 "void(int8 addr)" `431 
v L "stream" 2 681 "int8" `434 
v L "addr" 2 681 "int8" `435 
f G "i2c_slaveaddr" 2 681 "void(int8 stream,int8 addr)" `433 
f B "i2c_poll" 2 682 "int8()" `436 
v L "stream" 2 683 "int8" `438 
f G "i2c_poll" 2 683 "int8(int8 stream)" `437 
v L "baud" 2 684 "int32" `440 
f B "i2c_init" 2 684 "void(int32 baud)" `439 
v L "stream" 2 685 "int8" `442 
v L "baud" 2 685 "int32" `443 
f G "i2c_init" 2 685 "void(int8 stream,int32 baud)" `441  "#use spi() Prototypes:"
f B "spi_xfer" 2 688 "int8()" `444 
f G "spi_xfer" 2 689 "int16()" `445 
f G "spi_xfer" 2 690 "int32()" `446 
v L "data" 2 691 "int8" `448 
f G "spi_xfer" 2 691 "int8(int8 data)" `447 
v L "data" 2 692 "int16" `450 
f G "spi_xfer" 2 692 "int16(int16 data)" `449 
v L "data" 2 693 "int32" `452 
f G "spi_xfer" 2 693 "int32(int32 data)" `451 
v L "stream" 2 694 "int8" `454 
v L "data" 2 694 "int8" `455 
f G "spi_xfer" 2 694 "int8(int8 stream,int8 data)" `453 
v L "stream" 2 695 "int8" `454 
v L "data" 2 695 "int16" `458 
f G "spi_xfer" 2 695 "int16(int8 stream,int16 data)" `456 
v L "stream" 2 696 "int8" `454 
v L "data" 2 696 "int32" `461 
f G "spi_xfer" 2 696 "int32(int8 stream,int32 data)" `459 
v L "stream" 2 697 "int8" `463 
v L "data" 2 697 "int8" `464 
v L "bits" 2 697 "int8" `465 
f G "spi_xfer" 2 697 "int8(int8 stream,int8 data,int8 bits)" `462 
v L "stream" 2 698 "int8" `463 
v L "data" 2 698 "int16" `464 
v L "bits" 2 698 "int8" `469 
f G "spi_xfer" 2 698 "int16(int8 stream,int16 data,int8 bits)" `466 
v L "stream" 2 699 "int8" `463 
v L "data" 2 699 "int32" `464 
v L "bits" 2 699 "int8" `473 
f G "spi_xfer" 2 699 "int32(int8 stream,int32 data,int8 bits)" `470 
v L "baud" 2 700 "int32" `475 
f B "spi_init" 2 700 "void(int32 baud)" `474 
v L "stream" 2 701 "int8" `477 
v L "baud" 2 701 "int32" `478 
f G "spi_init" 2 701 "void(int8 stream,int32 baud)" `476 
v L "baud" 2 702 "int32" `480 
f B "spi_speed" 2 702 "void(int32 baud)" `479 
v L "stream" 2 703 "int8" `482 
v L "baud" 2 703 "int32" `483 
f G "spi_speed" 2 703 "void(int8 stream,int32 baud)" `481 
v L "stream" 2 704 "int8" `485 
v L "baud" 2 704 "int32" `486 
v L "clock" 2 704 "int32" `487 
f G "spi_speed" 2 704 "void(int8 stream,int32 baud,int32 clock)" `484 
v L "data" 2 705 "int8" `489 
f B "spi_prewrite" 2 705 "void(int8 data)" `488 
v L "data" 2 706 "int16" `491 
f G "spi_prewrite" 2 706 "void(int16 data)" `490 
v L "data" 2 707 "int32" `493 
f G "spi_prewrite" 2 707 "void(int32 data)" `492 
v L "??65535" 2 708 "int8" `495 
v L "data" 2 708 "int8" `496 
f G "spi_prewrite" 2 708 "void(int8 ,int8 data)" `494 
v L "??65535" 2 709 "int8" `495 
v L "data" 2 709 "int16" `499 
f G "spi_prewrite" 2 709 "void(int8 ,int16 data)" `497 
v L "??65535" 2 710 "int8" `495 
v L "data" 2 710 "int32" `502 
f G "spi_prewrite" 2 710 "void(int8 ,int32 data)" `500 
f B "spi_xfer_in" 2 711 "int8()" `503 
f G "spi_xfer_in" 2 712 "int16()" `504 
f G "spi_xfer_in" 2 713 "int32()" `505 
v L "bits" 2 714 "int8" `507 
f G "spi_xfer_in" 2 714 "int8(int8 bits)" `506 
v L "bits" 2 715 "int8" `509 
f G "spi_xfer_in" 2 715 "int16(int8 bits)" `508 
v L "bits" 2 716 "int8" `511 
f G "spi_xfer_in" 2 716 "int32(int8 bits)" `510 
v L "stream" 2 717 "int8" `513 
v L "bits" 2 717 "int8" `514 
f G "spi_xfer_in" 2 717 "int8(int8 stream,int8 bits)" `512 
v L "stream" 2 718 "int8" `513 
v L "bits" 2 718 "int8" `517 
f G "spi_xfer_in" 2 718 "int16(int8 stream,int8 bits)" `515 
v L "stream" 2 719 "int8" `513 
v L "bits" 2 719 "int8" `520 
f G "spi_xfer_in" 2 719 "int32(int8 stream,int8 bits)" `518  "#use rtos() Prototypes:"
f B "rtos_run" 2 722 "void()" `521 
f B "rtos_yield" 2 723 "void()" `522 
v L "task" 2 724 "int8" `524 
f B "rtos_enable" 2 724 "void(int8 task)" `523 
v L "task" 2 725 "int8" `526 
f B "rtos_disable" 2 725 "void(int8 task)" `525 
f B "rtos_terminate" 2 726 "void()" `527 
v L "flag" 2 727 "int8" `529 
f B "rtos_await" 2 727 "void(int8 flag)" `528 
v L "sem" 2 728 "int8" `531 
f B "rtos_wait" 2 728 "void(int8 sem)" `530 
v L "sem" 2 729 "int8" `533 
f B "rtos_signal" 2 729 "void(int8 sem)" `532 
v L "task" 2 730 "int8" `535 
v L "msg" 2 730 "int8" `536 
f B "rtos_msg_send" 2 730 "void(int8 task,int8 msg)" `534 
f B "rtos_msg_read" 2 731 "int8()" `537 
f B "rtos_msg_poll" 2 732 "int8()" `538 
v L "task" 2 733 "int8" `540 
f B "rtos_overrun" 2 733 "int8(int8 task)" `539 
v L "task" 2 734 "int8" `542 
v L "stat" 2 734 "*int8" `543 
f B "rtos_stats" 2 734 "void(int8 task,*int8 stat)" `541  "#use timer() Prototypes:"
f B "get_ticks" 2 737 "int8()" `544 
f G "get_ticks" 2 738 "int16()" `545 
f G "get_ticks" 2 739 "int32()" `546 
v L "stream" 2 740 "int8" `548 
f G "get_ticks" 2 740 "int8(int8 stream)" `547 
v L "stream" 2 741 "int8" `550 
f G "get_ticks" 2 741 "int16(int8 stream)" `549 
v L "stream" 2 742 "int8" `552 
f G "get_ticks" 2 742 "int32(int8 stream)" `551 
v L "value" 2 743 "int8" `554 
f B "set_ticks" 2 743 "void(int8 value)" `553 
v L "value" 2 744 "int16" `556 
f G "set_ticks" 2 744 "void(int16 value)" `555 
v L "value" 2 745 "int32" `558 
f G "set_ticks" 2 745 "void(int32 value)" `557 
v L "stream" 2 746 "int8" `560 
v L "value" 2 746 "int8" `561 
f G "set_ticks" 2 746 "void(int8 stream,int8 value)" `559 
v L "stream" 2 747 "int8" `560 
v L "value" 2 747 "int16" `564 
f G "set_ticks" 2 747 "void(int8 stream,int16 value)" `562 
v L "stream" 2 748 "int8" `560 
v L "value" 2 748 "int32" `567 
f G "set_ticks" 2 748 "void(int8 stream,int32 value)" `565  "#use pwm() Prototypes:"
f B "pwm_on" 2 751 "void()" `568 
v L "stream" 2 752 "int8" `570 
f G "pwm_on" 2 752 "void(int8 stream)" `569 
f B "pwm_off" 2 753 "void()" `571 
v L "stream" 2 754 "int8" `573 
f G "pwm_off" 2 754 "void(int8 stream)" `572 
v L "duty" 2 755 "int16" `575 
f B "pwm_set_duty" 2 755 "void(int16 duty)" `574 
v L "stream" 2 756 "int8" `577 
v L "duty" 2 756 "int16" `578 
f G "pwm_set_duty" 2 756 "void(int8 stream,int16 duty)" `576 
v L "percent" 2 757 "int16" `580 
f B "pwm_set_duty_percent" 2 757 "void(int16 percent)" `579 
v L "stream" 2 758 "int8" `582 
v L "percent" 2 758 "int16" `583 
f G "pwm_set_duty_percent" 2 758 "void(int8 stream,int16 percent)" `581 
v L "frequency" 2 759 "int32" `585 
f B "pwm_set_frequency" 2 759 "void(int32 frequency)" `584 
v L "stream" 2 760 "int8" `587 
v L "frequency" 2 760 "int32" `588 
f G "pwm_set_frequency" 2 760 "void(int8 stream,int32 frequency)" `586  "#use capture() Prototypes:"
f B "get_capture_time" 2 763 "int16()" `589 
v L "stream" 2 764 "int8" `591 
f G "get_capture_time" 2 764 "int16(int8 stream)" `590 
f B "get_capture_event" 2 765 "int8()" `592 
v L "stream" 2 766 "int8" `594 
f G "get_capture_event" 2 766 "int8(int8 stream)" `593  "Enviroment Prototypes:"
c L "get_capture_event" 2 5 2 "FUNCTION"
v L "address" 2 779 "int16" `596 
f B "goto_address" 2 779 "void(int16 address)" `595 
v L "label" 2 780 "int16" `598 
f B "label_address" 2 780 "int16(int16 label)" `597  "Program Memory Prototypes:"
v L "address" 2 783 "int16" `600 
v L "dataptr" 2 783 "*int8" `601 
v L "count" 2 783 "int16" `602 
f B "read_program_memory" 2 783 "void(int16 address,*int8 dataptr,int16 count)" `599 
v L "address" 2 784 "int16" `604 
f B "read_program_eeprom" 2 784 "int16(int16 address)" `603 
v L "address" 2 785 "int16" `606 
f B "erase_program_eeprom" 2 785 "void(int16 address)" `605 
v L "address" 2 786 "int16" `608 
v L "dataptr" 2 786 "*int8" `609 
v L "count" 2 786 "int16" `610 
f B "write_program_memory" 2 786 "void(int16 address,*int8 dataptr,int16 count)" `607 
v L "address" 2 787 "int16" `612 
v L "data" 2 787 "int16" `613 
f B "write_program_eeprom" 2 787 "void(int16 address,int16 data)" `611  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 792 "int16" `614 
v L "address" 2 797 "__EEADDRESS__" `616 
f B "read_eeprom" 2 797 "int8(__EEADDRESS__ address)" `615 
v L "address" 2 798 "__EEADDRESS__" `618 
v L "value" 2 798 "int8" `619 
f B "write_eeprom" 2 798 "void(__EEADDRESS__ address,int8 value)" `617  "#use touchpad() Prototypes:"
v L "state" 2 801 "int8" `621 
f B "touchpad_state" 2 801 "void(int8 state)" `620 
f B "touchpad_getc" 2 802 "int8()" `622 
f B "touchpad_hit" 2 803 "int8()" `623  "INT"
c L "touchpad_hit" 2 5 4 "FUNCTION"
v L "interrupt" 2 809 "int32" `625 
f B "enable_interrupts" 2 809 "void(int32 interrupt)" `624 
v L "interrupt" 2 810 "int32" `627 
f B "disable_interrupts" 2 810 "void(int32 interrupt)" `626 
v L "interrupt" 2 811 "int32" `629 
f B "clear_interrupt" 2 811 "void(int32 interrupt)" `628 
v L "interrupt" 2 812 "int32" `631 
f B "interrupt_active" 2 812 "int8(int32 interrupt)" `630 
v L "source" 2 813 "int8" `633 
v L "edge" 2 813 "int8" `634 
f B "ext_int_edge" 2 813 "void(int8 source,int8 edge)" `632 
v L "address" 2 814 "int16" `636 
f B "jump_to_irs" 2 814 "void(int16 address)" `635  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 816 "0x40"
d G "H_TO_L" 2 817 "0"
d G "GLOBAL" 2 819 "0x0BC0"
d G "PERIPH" 2 820 "0x0B40"
d G "INT_EXT_L2H" 2 821 "0x50000B10"
d G "INT_EXT_H2L" 2 822 "0x60000B10"
d G "INT_EXT" 2 823 "0x300B10"
d G "INT_TIMER0" 2 824 "0x300B20"
d G "INT_TIMER1" 2 825 "0x309101"
d G "INT_TIMER2" 2 826 "0x309102"
d G "INT_CCP1" 2 827 "0x309104"
d G "INT_SSP" 2 828 "0x309108"
d G "INT_TBE" 2 829 "0x309110"
d G "INT_RDA" 2 830 "0x309120"
d G "INT_AD" 2 831 "0x309140"
d G "INT_TIMER1_GATE" 2 832 "0x309180"
d G "INT_BUSCOL" 2 833 "0x309208"
d G "INT_EEPROM" 2 834 "0x309210"
d G "INT_COMP" 2 835 "0x309220"
d G "INT_OSC_FAIL" 2 836 "0x309280"
d G "INT_TIMER4" 2 837 "0x309302"
d G "INT_TIMER6" 2 838 "0x309308"
d G "INT_CCP3" 2 839 "0x309310"
d G "INT_CCP4" 2 840 "0x309320"
d G "INT_CCP2" 2 841 "0x309201"
d G "INT_RA" 2 842 "0x30FF0B08"
d G "INT_RA0" 2 843 "0x30010B08"
d G "INT_RA0_L2H" 2 844 "0x10010B08"
d G "INT_RA0_H2L" 2 845 "0x20010B08"
d G "INT_RA1" 2 846 "0x30020B08"
d G "INT_RA1_L2H" 2 847 "0x10020B08"
d G "INT_RA1_H2L" 2 848 "0x20020B08"
d G "INT_RA2" 2 849 "0x30040B08"
d G "INT_RA2_L2H" 2 850 "0x10040B08"
d G "INT_RA2_H2L" 2 851 "0x20040B08"
d G "INT_RA3" 2 852 "0x30080B08"
d G "INT_RA3_L2H" 2 853 "0x10080B08"
d G "INT_RA3_H2L" 2 854 "0x20080B08"
d G "INT_RA4" 2 855 "0x30100B08"
d G "INT_RA4_L2H" 2 856 "0x10100B08"
d G "INT_RA4_H2L" 2 857 "0x20100B08"
d G "INT_RA5" 2 858 "0x30200B08"
d G "INT_RA5_L2H" 2 859 "0x10200B08"
d G "INT_RA5_H2L" 2 860 "0x20200B08"
D G "LED" 1 11 "PIN_C0"
D G "LEDA" 0 2 "PIN_C0"
D G "LEDB" 0 3 "PIN_C2"
D G "inCoil" 0 4 "PIN_C3"
D G "DELAY" 0 5 "25"
F G "main" 0 6 "void()" `641  "Example blinking LED program"
C L "main" 0 11 1 "FUNCTION"
C L "main" 0 11 4 "FUNCTION"
C L "main" 0 11 1 "FUNCTION"
C L "main" 0 11 4 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_c" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
